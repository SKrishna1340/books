var g_sepIdx = [];
//g_searchEnginePlainTextArray -> treeId | TopicText
var g_searchEnginePlainTextArray = [];
g_sepIdx[g_sepIdx.length] = '24f58f8b03ac1fa31d4c2ec8d0089d48';
g_searchEnginePlainTextArray['24f58f8b03ac1fa31d4c2ec8d0089d48'] = 'Introduction In the following, the previously created process screen \" BreweryProcess\", which contains the 3 storage tanks for water, hops and malt, is to be expanded to include the remaining components of the brewing process. A mash tun is inserted and connected to the storage tanks via pipes. A heat source that heats the mash tun is inserted. In addition to the graphic elements, display elements for the process values of the mash tun are to be added. Procedure Insert the displayed tank, which represents the mash tun. Locate the tank in the \" Toolbox\" task card under \" Graphics \u003e WinCC  Graphics folder \u003e  Equipment \u003e  Automation [SVG] \u003e  Tanks\". Place the desired tank using drag-and-drop. Use pipe graphics to complete the HMI screen. Locate the pipe graphics in the \" Toolbox\" task card under \" Graphics \u003e WinCC  Graphics folder \u003e  Equipment \u003e  Automation [SVG] \u003e  Pipes\". Place the required pipe elements. Connect the tubes and tanks in the screen by increasing or reducing the size of the pipe graphics. Efficiency tip : Move the selected screen object forward one position within the layer. : Move the selected screen object backward one position within the layer. A complete overview of the layers can be found in the \" Layout\" task card. Insert the heat source graphic. Locate the heat sources in the \" Toolbox\" task card under \" Graphics \u003e WinCC  Graphics folder \u003e  Equipment \u003e  Automation [SVG] \u003e  Heating \u0026 boilers\". Place the desired heat source using drag-and-drop. Insert a value display for the fill level tag \" HMI_filling_level_mash_tun\" of the tank. Click on the \" mash_tun\" tag table Open the \" Details view\" in the project tree. Drag the \" HMI_filling_level_mash_tun\" tag into the screen using drag-and-drop. An IO field connected to the tag is automatically created. Add a text for labeling the IO field. Place the text object above the IO field. Double-click the text object. Label the text object with \" filling level\".';
g_sepIdx[g_sepIdx.length] = 'd892661c57c0b3ae8a657a27160a252d';
g_searchEnginePlainTextArray['d892661c57c0b3ae8a657a27160a252d'] = 'Introduction In the following, an alarm is to be configured that is triggered when the fill level in one of the storage tanks falls below a defined limit value. The following alarms are to be configured for the storage tanks of the ingredients. Name Alarm text Supervised tag Alarm class Limit alarm_level_water \" filling level water low\" HMI_filling_level_water  Alarm 50 l alarm_level_malt \" filling level malt low\" HMI_filling_level_malt Alarm 50 kg alarm_level_hop \" filling level hop low\" HMI_filling_level_hop  Alarm 50 kg Procedure Open the alarm overview. Open \" HMI alarms\" in the project tree. Click \" Analog alarms\" in the work area. Create alarms for limit violations of the fill levels of the water, hops, and malt tanks. Add three alarms. Configure the alarms as described below.';
g_sepIdx[g_sepIdx.length] = '320517bccf0517df538bc59d1df8e5de';
g_searchEnginePlainTextArray['320517bccf0517df538bc59d1df8e5de'] = 'Requirement PLCSIM is installed. Introduction To establish the connection with PLCSIM, define the access rights for the PLC before setting up the connection. When you start the simulation, the PLCSIM control window opens. You can control the simulation using the \"Run\" and \"Stop\" buttons. If you follow the explained procedure, no operation of the control window is required.  During the procedure, deactivate functions for the protection of confidential data and restrictions on operation. These functions are deactivated to simplify the simulation. In the real process environment, this access must be restricted. With automation systems, the unconditional maintenance of operational safety and the protection of life and limb are paramount. The decisive requirement for this is maintaining the availability of the system and thus unrestricted control over the process. To make a final check of the procedure, establish an online connection. A more detailed explanation is not provided in this Getting Started guide since no PLC functionality has been created due to the absence of external tags. Procedure Open the properties of the PLC \" Brewery Control\". Configure the PLC security settings. Select the \" Protection \u0026 Security\" menu. Deselect \" Protect confidential PLC configuration data\". Select the access level \" Full access\". Start the simulation. Start the search for target devices and select a target device. Select the type of PG/PC interface \" PN/IE\". Select the connection \" PN_IE_1\". Start the search. Select the target device. Click \"Load\". Check the settings and load the data. Specify that the module should be started after the download, and finish the download. Establish an online connection. Result The connection has been established successfully.';
g_sepIdx[g_sepIdx.length] = '9b91d7e36fad54c2ce5c1e01c1a76a30';
g_searchEnginePlainTextArray['9b91d7e36fad54c2ce5c1e01c1a76a30'] = 'Introduction In the following you will create a user data type on the PLC and add it to the project library. The user data type is later used as the basis for the parameter set type. The user data type contains the following elements: Element name Use Data type water Quantity of water Int hop Quantity of hops Int malt Quantity of malt Int Procedure Add a new PLC data type. Navigate in the PLC \" Brewery Control\" to \" PLC data types\". Add a new data type. Configure the PLC data type. Name the PLC data type \" UDT_Beer\". Add the elements \" Water\", \" Hop\" and \" Malt\". Select the \" Int\" data type for all elements. Add the PLC data type \" UDT_Beer\" to the project library as a user data type using drag-and-drop. Name the user data type in the project library \" UDT_Beer\".';
g_sepIdx[g_sepIdx.length] = '0749f094692a2f163e3deca0082f7a35';
g_searchEnginePlainTextArray['0749f094692a2f163e3deca0082f7a35'] = ' XML_NODE_NOTE Requirement At least one project has been loaded into Runtime. At least one project has a project type other than \"Simulation\". Procedure Enable the \"Autostart\" option for one of the projects that has a project type other than \"Simulation\". You can select only one project for autostart at a time. Result The project is started automatically when the device on which Runtime is installed is booted. WinCC Unified Runtime | section \"SIMATIC Runtime Manager\"';
g_sepIdx[g_sepIdx.length] = '9b38b5a05be17d256ddae5b9839223c9';
g_searchEnginePlainTextArray['9b38b5a05be17d256ddae5b9839223c9'] = 'Introduction In the following you will configure the parameter set control. The parameter sets are created and edited in runtime via the parameter set control. Procedure Insert a parameter set control into the HMI screen \" ProductCtrl\". Open the HMI screen \" ProductCtrl\". Locate the control in the \" Toolbox\" task card under \" Controls\". Insert a parameter set control into the HMI screen using drag-and-drop. Connect a parameter set type to the parameter set control. Click on the parameter set control. Navigate in the properties to \" General \u003e  Fixed parameter set type\". Connect the parameter set type \" PST_Beer\" to the parameter set control.';
g_sepIdx[g_sepIdx.length] = '0e8caec709410c0c9fe4fc97b9eb1bce';
g_searchEnginePlainTextArray['0e8caec709410c0c9fe4fc97b9eb1bce'] = 'Basics You use the screen window technology to implement the screen navigation. You divide the overview screen into 3 areas using screen windows and determine which HMI screens are displayed in the respective screen window. Information on the system is displayed in the screen window \" sw_Content\", for example the brewing process, alarms or process values. The HMI screens that are used for navigation are displayed in the \" sw_Header\" and \" sw_Navigation\" screen windows. You can use the \" Open Navigation\" button in the HMI screen \" Header\" to show the HMI screen \" Navigation\". Using the buttons in the HMI screen \" Navigation\", the operator changes the screens in the screen window \" sw_Content\" in Runtime.';
g_sepIdx[g_sepIdx.length] = '765ebabbf8df0f55011732599d340dc4';
g_searchEnginePlainTextArray['765ebabbf8df0f55011732599d340dc4'] = 'Description Unified Collaboration refers to the exchange of data between multiple Unified systems (Unified PC and Unified Comfort Panel) during runtime. With  Unified Collaboration, process screens of other stations can be displayed and operated in a screen window. Thus, no double configuration effort is required. To enable the data transfer, the settings for  Unified Collaboration must be specified in all systems. After the configuration, the Unified Comfort Panel is shared for access. In the Unified PC, access to the Unified Comfort Panel is activated.';
g_sepIdx[g_sepIdx.length] = 'd126cff2952ce54621c6405863724949';
g_searchEnginePlainTextArray['d126cff2952ce54621c6405863724949'] = 'Basics The basis for configuring the user interface is the project. Projects contain data and programs that result from creating an automation solution. Project data includes, for example: Hardware configuration data and parameterization data for modules Configuration data for network communication Configuration data for the devices In the project, you create and configure basic objects that are needed for operator control and monitoring of a plant, such as: Tags for storing data temporarily or transferring data between the HMI device and plant. Screens for representing and facilitating operation of a plant. Alarms for displaying errors on the HMI device.';
g_sepIdx[g_sepIdx.length] = 'd6af76b44db70fd76fa60d48ab31d1ec';
g_searchEnginePlainTextArray['d6af76b44db70fd76fa60d48ab31d1ec'] = 'WinCC provides large number graphics and symbols for industrial automation. These include motors, pumps, valves, and tanks, as well as technical components for numerous different industrial sectors. In addition to static graphics, you can also choose from a selection of dynamic SVG graphics. Dynamic SVG graphics have an interface for changing pre-defined properties of the graphic, such as colors or levels. Introduction In the following section, the static mash tun graphic is replaced with a dynamic SVG graphic and dynamized. Procedure Open the \" BreweryProcess\" screen. Delete the screen elements for the mash tun and the heat source. Insert the dynamic SVG mash tun graphic in the screen. You can find it in the \" Toolbox\" task card under \" Dynamic widgets \u003e  IndustryGraphicLibrary \u003e  Brewery\". Change the static value of the \" FillLevel\" interface. Specify that a tag is to be used for the dynamization. Link the \" FillLevel\" interface with the \" HMI_filling_level_mash_tun\" tag.';
g_sepIdx[g_sepIdx.length] = '79756080421bfcbb49b5fd15314bcbaf';
g_searchEnginePlainTextArray['79756080421bfcbb49b5fd15314bcbaf'] = 'Introduction In the following you will learn how to implement the screen navigation using the screen window concept. The following screen objects are needed for this: Object Type Label Use BreweryOverview HMI screen - Overview screen for operating and monitoring the brewing process sw_Content Screen window - Screen for displaying the screens for process control sw_Header Screen window - Screen for opening the navigation between process control screens sw_Navigation Screen window - Screen for navigating between process control screens btn_ShowNavigation Button Open Navigation Shows the screen window \" sw_Navigation\" btn_HideNavigation Button \u003c Hides the screen window \" sw_Navigation\" btn_ProcessBrewery Button Brewery Screen change for the brewing process btn_ProcessValues Button Process Values Screen change for process values from the brewing process btn_Alarms Button Alarms Screen change for alarms from the brewing process btn_ProductCtrl Button Production Screen change for production control Procedure Add a screen window to the HMI screen \" BreweryOverview\" to display the  \"Header\". Open the HMI screen \" BreweryOverview\". Locate the screen window in the \" Toolbox\" task card under \" Controls\". Place the screen window using drag-and-drop. Specify that the HMI screen \" Header\" is displayed in the screen window. Click on the screen window. Navigate in the properties to \" General\". Link the HMI screen \" Header\" with the screen window. Configure the window settings for the screen window. Navigate in the properties to \" Appearance\". Configure the window settings such that only \" Show border\" is selected. Configure the screen window so that it adapts to the size of the displayed HMI screen. Navigate in the properties to \" Format\". Select the option \" Fit window to screen\". Change the name of the screen window. Navigate in the properties to \" Miscellaneous\". Name the screen window \" sw_Header\". Configure the screen window \" sw_Content\": Copy the screen window \" sw_Header\". Name the copied screen window \" sw_Content\". Specify that the HMI screen \" BreweryProcess\" is displayed in the screen window. Configure the screen window \" sw_Navigation\": Copy the screen window \" sw_Header\". Name the copied screen window \" sw_Navigation\". Specify that the HMI screen \" Navigation\" is displayed in the screen window. Specify that the screen window \" sw_Navigation\" is always displayed in the foreground.  Position the three screen windows in the HMI screen \" BreweryOverview\": Specify the position for the screen window \" sw_Header\". Specify the position for the screen window \" sw_Content\". Using the mouse, position the screen window \" sw_Navigation\" over the other two screen windows.';
g_sepIdx[g_sepIdx.length] = 'e2705e4df8ce35f1234671c825fd75bf';
g_searchEnginePlainTextArray['e2705e4df8ce35f1234671c825fd75bf'] = 'User management in the TIA Portal allows for the system-wide, central administration of users. User management forms the basis for efficient and integrated administration of personalized access rights in the system, which significantly reduces security risks. The assignment of roles and rights on a person-specific basis minimizes maintenance effort and increases transparency. Basics WinCC user management allows you to limit security-relevant operator actions to certain users. In this way, you protect data and functions in Runtime from unauthorized access. Set up users and assign authorizations to these users. Configure the authorizations required for operation of safety-related objects. Users must prove their identity in Runtime by entering their user name and password. The requested action is executed provided the user has the required authorization. When a user is assigned a role, they receive the function rights associated with it. Roles with associated rights may look like the following for a brewing process: Brewmaster Shift manager Operator May monitor the process x x x May operate the process x x May edit the recipes x User management is configured globally or locally. Local and central user management Local user management is configured directly in the project. You can create users, define roles and their associated rights, and assign roles to the users. The users, roles and rights are only available in this project. Subsequent addition or removal of users changes the project. Local user management is appropriate if you create and manage only one project. For example, a single brewery. In the case of global user management, users are managed centrally on an external server. You create the users centrally on an external server and organize them in groups corresponding to their later function. You do not create any users in the project. Rather, you import the groups from the external server and assign the corresponding roles to the groups. To add users later, they are created on the external server and assigned to an existing group. Users automatically receive the role assigned to the group in the respective project. It is not necessary to change the project.  Global user management is particularly well-suited to central maintenance of multiple projects. This is the case for example, when several different breweries are managed by the same company, or when new employees are added frequently.';
g_sepIdx[g_sepIdx.length] = '0fb171cc771c542ddd979d23c352914b';
g_searchEnginePlainTextArray['0fb171cc771c542ddd979d23c352914b'] = 'Basics Faceplates are user-defined groups of display and operating objects that are stored, managed and edited centrally in the project. Ideally, you should use faceplates for plant objects or plant units that you use multiple times and that have identical data structures. In order to support central changeability, faceplates are based on a type-instance model: You create properties for faceplate instances centrally in the faceplate type. The instances represent local points of use of the faceplate type. If you make subsequent changes in the faceplate type, they are compiled in all faceplate instances used.';
g_sepIdx[g_sepIdx.length] = '8e7b645a4717509f6ce6f3c4a543b07f';
g_searchEnginePlainTextArray['8e7b645a4717509f6ce6f3c4a543b07f'] = 'Introduction Employees of the \" worker\" user group should not be able to access the process values. To ensure this, configure appropriate access protection for the button for calling the process values. Procedure Configure access protection for the \"Process Values\" button. Open the \" Navigation\" screen. Select the \" Process Values\" button. Navigate in the properties to \" Security\". Assign the authorization \" Operate\" to the button.';
g_sepIdx[g_sepIdx.length] = 'c53a4a19ee84f255c5342f7693151564';
g_searchEnginePlainTextArray['c53a4a19ee84f255c5342f7693151564'] = 'Introduction The storage tanks for the beer ingredients should now be visualized on the basis of the created faceplate type. Insert an instance of the faceplate type for each storage tank and parameterize the interfaces with the corresponding tags. Procedure Create the instance for the storage tank containing water from the faceplate type. Open the HMI screen \" BreweryProcess\". Place the faceplate type \" Tank\" from the project library in the screen using drag-and-drop. Connect the interface tag \" pressure\" of the faceplate instance to the \" HMI_pressure_water\" tag. Click the faceplate instance. Navigate to \" pressure\" in the properties under \" Miscellaneous \u003e  Interface\". Link the interface tag with the \" HMI_pressure_water\" tag. Connect the remaining interface tags of the faceplate instance in the same way. Visualize and connect the storage tank for hops in the same way. Visualize and connect the storage tank for malt in the same way.';
g_sepIdx[g_sepIdx.length] = 'd2ae2a003d186997e6ea3b5449fb3272';
g_searchEnginePlainTextArray['d2ae2a003d186997e6ea3b5449fb3272'] = 'Basics Process visualization is generally split between multiple screens, for example on the basis of functional or technological aspects. Changing between screens is referred to as screen navigation.';
g_sepIdx[g_sepIdx.length] = '29f212ab76493588d3caa6c406a8e099';
g_searchEnginePlainTextArray['29f212ab76493588d3caa6c406a8e099'] = 'Introduction In the following you will learn how to start the simulation of the HMI device and check the correct functioning of the configuration in Runtime. Requirement The simulation of the configured PLC \" Brewery Control\" has been started without errors. The setting for encrypted communication has been configured or deactivated in the HMI device under \" Runtime settings\". Starting the simulation Start the simulation for the HMI device.  Specify that local user management is used.  Open the information for \" Runtime values\". Deselect \" Keep current user management data in runtime\". Confirm loading of the configuration data to the HMI device. Access Runtime via a browser. Open a browser. In the address line, enter \" https://127.0.0.1\" or \" https://localhost\". Log in to Runtime. Use the \" master_brewer\" user. Enter the password. Confirm the login. Testing the configuration Check that all screen changes are working as intended. Check the visualization of the brewery process. Open the Navigation. Change the screen using the Navigation. Navigate to the \" Production\" screen. Create a parameter set for the beer type \" Pilsner\". Click \" Create parameter set\". Name the parameter set \" Pilsner\". Enter \"1\" as the number. Confirm your selection. Configure the values of the ingredients for the parameter set \" Pilsner\". Enter the desired ingredient amounts under Value. Save the parameter set \" Pilsner\". Congratulations! You have created your first project with WinCC Unified and successfully tested it in Runtime. ';
g_sepIdx[g_sepIdx.length] = 'c3566f1e1d4cd122e6b3626e4c8daeab';
g_searchEnginePlainTextArray['c3566f1e1d4cd122e6b3626e4c8daeab'] = 'Introduction In this Getting Started, you have configured functions at events such as \" Click left mouse button\", e.g. a function that triggers a screen change in Runtime. With this configuration, you have got to know a small part of the \"scripting\". WinCC Runtime Unified has a modern script environment that supports JavaScript as the programming language. Programming environment The programming environment is integrated into the familiar working environment and supports functions such as syntax highlighting: When programming in JavaScript, you are supported by an autocomplete function. Code snippets make programming easier by providing frequently used instruction patterns: Concepts Scripting supports global and local scripts: You program global scripts centrally in the project. You can call global scripts in local scripts, for example, to convert measurement units.   You can program local scripts at the respective point of use, e.g. color change at an object.  You can use predefined system functions for frequently required programming tasks, for example to change values or to exit Runtime.  Typical application examples In this Getting Started, you have used the following JavaScript functions: Code snippets System functions Other typical application examples of JavaScript are:  Reading and writing of tags Changing object properties depending on other properties or values Access to alarms Configuring the HMI screen to open the process screens Configuring a pop-up window for faceplates SIMATIC WinCC Unified - Tips and Tricks for Scripting (JavaScript)';
g_sepIdx[g_sepIdx.length] = 'e2fe98ab608bba71831283c65f970aae';
g_searchEnginePlainTextArray['e2fe98ab608bba71831283c65f970aae'] = 'Introduction In the following a pop-up window for faceplates is to be configured in which additional information on the fill level, temperature, and pressure of the respective storage tank is displayed when you click on one of the 3 storage tanks. Procedure Duplicate the faceplate type \" Tank\" in the project library. All interface tags of the faceplate type \" Tank\" are transferred to the new faceplate. Right-click on the faceplate type \" Tank\" in the project library. Select \" Duplicate type\". Specify the properties of the new faceplate type. Name the new faceplate type \" Tank_Details\". Confirm your selection. Open the new faceplate type for editing. Right-click on the faceplate type \" Tank_Details\" in the project library. Select \" Edit type\". Delete the graphic elements of the copied faceplate type. Use multiple selection. Hold down the \u003cShift\u003e key and click all the screen objects in the faceplate. Right-click a selected screen object. Alternatively, press \u003c Delete\u003e. Delete the selected screen objects. Insert the text for the level.  Locate the text object in the \" Toolbox\" task card under \" Basic objects\". Place the text object using drag-and-drop. Label it with \" filling level\". Insert the IO field for the fill level. IO fields can be found in the \" Toolbox\" task card under \" Elements\". Place the IO field using drag-and-drop. Connect the IO field to the interface tag \" filling_level\". Click on the IO field. Select \" Tag\" for dynamization of the process value. Link the IO field to the interface tag \" filling_level\". Configure the text and IO fields for temperature and pressure. Connect the IO fields to the interface tags \" temperature\" and \" pressure\". Adjust the size of the faceplate type. Click on the background of the faceplate type. Adjust the size. Release the faceplate type for the pop-up window in the project library. Open the faceplate type \" Tank\" in the project library for editing. Create an event that is triggered by left-clicking on the tank. Click on the tank graphic in the faceplate type. Select \" Events\" in the Inspector window. Select \" Click left mouse button\". Click the icon for creating a script. Insert the snippet for opening a faceplate as a pop-up window. Right-click the displayed row in the script. Navigate to \" Snippets \u003e  Faceplate\" and select \" Open faceplate in popup\". Insert the name of the newly created faceplate \" Tank_Details_V_0_0_2\" and the designation \" Tank status\" into the script. Release the faceplate type in the project library and check the \"Update instances in the project\" box. Confirm your selection. Result The pop-up window for faceplates has been created and is opened in Runtime when you click one of the storage tanks.';
g_sepIdx[g_sepIdx.length] = 'd924a56554dd3e7946132fa723649154';
g_searchEnginePlainTextArray['d924a56554dd3e7946132fa723649154'] = 'Introduction Certificates are used to securely connect end devices to WinCC Unified Runtime. Certificates fulfill the following tasks: Confirm the identity of the communication partner Encrypt data exchange Operating principle ① You use the WinCC Unified Configuration tool to transfer the certificate to the clients that can access Runtime. ② When the operator enters the URL of the Runtime server, the identity of the client is checked using the certificate. ③ After the check, the operator authenticates themself with user name and password. ④ Communication between the Runtime server and client is encrypted using the HTTPS protocol. Setting up the certificate structure You can find information on setting up the certificate structure with WinCC Unified Configuration here: WinCC Configuration Tool | FAQ';
g_sepIdx[g_sepIdx.length] = 'c5c4dbf9e03baba72e6235163410ba17';
g_searchEnginePlainTextArray['c5c4dbf9e03baba72e6235163410ba17'] = 'Purpose You implement the screen navigation using the screen window technology. In an overview screen, you can insert the following screen windows, which fulfill different tasks: Header A navigation window is shown above the header. Navigation The operator uses the buttons in the navigation window to change the content in the content window. The navigation window is hidden by default. Content Information on the system is displayed in the content window. Fill levels of tanks or plant alarms are displayed, for example. You can specify the content of the screen windows using HMI screens. Template Suite Systems and machines are becoming more and more complex and the demands placed on the operator of a system are increasing. An intuitive and graphically appealing user interface, which serves as the interface between human and machine, is therefore becoming increasingly important. The  HMI Template Suite provides you with templates and ideas for configuring your HMI device in a clear and modern way. The layout and design are designed for smooth operability, clarity, and expandability. In this way, you can simplify the operation of your machine and reduce operating errors.  You can learn how to work with the  HMI Template Suitein the following application example: Application example \"HMI Template Suite\"';
g_sepIdx[g_sepIdx.length] = 'e81b3dc7f215891729cdd7209e50de7f';
g_searchEnginePlainTextArray['e81b3dc7f215891729cdd7209e50de7f'] = 'Introduction During the brewing process, individual process variables such as the fill levels in the storage tanks, or the temperature in the mash tun, are to be monitored. A tag must be created for each of these variables. In the following, the tags shown in the table are to be created and organized in tag tables.  Name of the tag table Use filling_levels Fill level of tanks temperature Temperature of tanks pressure Pressure of tanks valve_status Valve status mash_tun Mash tun states Tag name Use Data type Tag table HMI_filling_level_water Fill level of water tank Int filling_levels HMI_filling_level_hop Fill level of hops tank Int filling_levels HMI_filling_level_malt Fill level of malt tank Int filling_levels HMI_valve_status_water Valve status of water tank open/closed Bool valve_status HMI_valve_status_hop Valve status of hops tank open/closed Bool valve_status HMI_valve_status_malt Valve status of malt tank open/closed Bool valve_status HMI_filling_level_mash_tun Fill level of mash tun Int mash_tun HMI_temperature_mash_tun Temperature of mash tun Int mash_tun HMI_heating_mash_tun Heater active/inactive Bool mash_tun HMI_pressure_water Pressure of water tank Int pressure HMI_pressure_hop Pressure of hops tank Int pressure HMI_pressure_malt Pressure of malt tank Int pressure HMI_temperature_water Temperature of water tank Int temperature HMI_temperature_hop Temperature of hops tank Int temperature HMI_temperature_malt Temperature of malt tank Int temperature Procedure Create a tag table with a tag. Locate \" HMI tags\" under the HMI device in the project tree. Add a new tag table. Name it \" filling_levels\". Add a tag to this table. Configure the tag for the fill level of the water tank. Name the created tag \" HMI_filling_level_water\". Select the data type \" Int\". Create the other tags listed in the table above in the same way. Add four more tag tables. Create the associated tags in the individual tag tables. Check your result by having all tags displayed.';
g_sepIdx[g_sepIdx.length] = '30629d70991a4030e505a6b61f029460';
g_searchEnginePlainTextArray['30629d70991a4030e505a6b61f029460'] = 'Introduction In the following you create the HMI screens that serve as the basis for the user interface of the brewery process: HMI screen name Screen type Use Size in pixels BreweryOverview Start screen Overview screen for operating and monitoring the brewing process 1440x900 BreweryProcess Process control Visualization of the brewing process 1440x800 Alarms Process control Overview of alarms from the process ProcessValues Process control Overview of logged process values ProductCtrl Process control Production control Header Navigation Screen for opening the navigation between process control screens 1440x100 Navigation Navigation Screen for navigating between process control screens 250x300 Procedure Create the start screen. Locate \" Screens\" under the HMI device in the project tree. Add a new screen. Name it \" BreweryOverview\". Adjust the size of the HMI screen. Click on the background in the work area. Navigate in the Inspector window to the property \" Size and position\". Resize the HMI screen according to the above table. Create the other HMI screens in the same way. Specify the screen size shown in the table above.';
g_sepIdx[g_sepIdx.length] = 'dc024032a9c582f6f175000f1cfe99ff';
g_searchEnginePlainTextArray['dc024032a9c582f6f175000f1cfe99ff'] = 'Basics Logging is a method for analyzing error states and for process documentation. By evaluating logged data, you can derive measures to optimize maintenance cycles or increase product quality. In WinCC Unified, the alarm classes and tags to be logged in process mode are selected during configuration.';
g_sepIdx[g_sepIdx.length] = '0764e6374caf616fb86cb8a2fe039080';
g_searchEnginePlainTextArray['0764e6374caf616fb86cb8a2fe039080'] = 'Introduction To manage compiled projects on a Unified PC, use Runtime Manager. Unlike on Unified Comfort Panels, multiple Runtime projects can be stored simultaneously on the Unified PC. Requirement Runtime Manager is installed. Runtime Manager is open. Functions Runtime Manager provides the following functions: Starting, stopping, and deletion of compiled configurations on the Unified PC Autostart of a configuration during device start-up Configuration start with specific user accounts Display of settings for user management Checking the connection to the UMC server Certificate management Restoring and deleting log segments';
g_sepIdx[g_sepIdx.length] = '5de4567fb936b4b395d60df4e7c53f88';
g_searchEnginePlainTextArray['5de4567fb936b4b395d60df4e7c53f88'] = 'Introduction  A project is to be created for the brewery sample project. Requirement The TIA Portal is open. Procedure First, create a new project. Click \" Create new project\". Name the project \"Brewery\". Enter the desired path and author. Confirm your selection. Switch to the project view. Add a new device. Select \"PC systems\". Navigate to \"PC systems \u003e SIMATIC HMI Application\". Select \"SIMATIC WinCC Unified PC\". Confirm your selection.';
g_sepIdx[g_sepIdx.length] = 'c2be280f74fab2234771e86f219371ce';
g_searchEnginePlainTextArray['c2be280f74fab2234771e86f219371ce'] = 'Basics The environment for operating and monitoring the brewing process is called \" Runtime\". Runtime runs in the browser independent of the device.  In this Getting Started, Runtime is run on the PC on which you configured it. For runtime to be started in the browser, the user logged on to Windows must have local admin rights. ';
g_sepIdx[g_sepIdx.length] = 'ef9360cc44e4b8e224c6cf97c295c99b';
g_searchEnginePlainTextArray['ef9360cc44e4b8e224c6cf97c295c99b'] = 'Parameter set type The parameter set type specifies the parameters and their properties according to which a product is manufactured. A parameter set type is a template for different products with the same basic ingredients.  No specific parameter values are stored in the parameter set type. Instead, a parameter set is created based on the parameter set type for each product to be manufactured, e.g. wheat beer or Pilsner. Parameter sets should be used when frequently changing between products with similar composition. In the process, you can quickly switch to another product. Basic changes to the structure are carried out centrally on the parameter set type. Parameter sets in the brewing process The brewmaster creates or imports one or more parameter sets. The shift manager selects the parameter set for the product to be manufactured. The parameter set is transferred from the HMI device to the PLC and the brewing process starts. The PLC runs the user program and uses the parameter values of the basic ingredients for production. The individual ingredients are fed into the mash tun. The brewing process continues according to the user program.';
g_sepIdx[g_sepIdx.length] = '19b3c77f40b4eb865b7b7be172850cf7';
g_searchEnginePlainTextArray['19b3c77f40b4eb865b7b7be172850cf7'] = 'Basics WinCC Unified distinguishes between two types of tags: Internal tags Internal tags have no link to the process. They transport values only within the HMI device and are available exclusively in Runtime. External tags External tags are the link between WinCC Unified and the automation systems. An external tag reads the process value of the PLC tag from the memory of an automation system or writes a new process value back into the memory of an automation system.';
g_sepIdx[g_sepIdx.length] = '55f46c10865d7145e50ede964dc8e13f';
g_searchEnginePlainTextArray['55f46c10865d7145e50ede964dc8e13f'] = 'Introduction The process values of the fill levels in the storage tanks and the mash tun are to be logged. To do this, a logging tag must be created for each tag and then assigned to a data log. Logging tag name Logging of process values from tag Data type Data log log_water_level HMI_filling_level_water Int filling_levels log_hop_level HMI_filling_level_hop Int filling_levels log_malt_level HMI_filling_level_malt Int filling_levels log_mash_tun_level HMI_filling_level_mash_tun Int filling_levels log_status_water HMI_valve_status_water Bool valve_status log_status_hop HMI_valve_status_hop Bool valve_status log_status_malt HMI_valve_status_malt Bool valve_status Procedure Create a data log \" filling_levels\". Open \" Logs\" in the project tree. Add a data log. Name it \" filling_levels\". Create logging tags for the data log \" filling_levels\". Assign the logging tags to the data log \" filling_levels\". Open the \" filling_levels\" tag table. Click the desired tag. Add a logging tag. Name it as described in the table above. Link the logging tag with the associated alarm log \" filling_levels\".  Repeat the procedure for the other two tags. Repeat the procedure for the \" HMI_filling_level_mash_tun\" tag. Locate the tag in the \" mash_tun\" tag table in the project tree. Verify that the data log \" filling_levels\" was created correctly with the associated logging tags. Create the above-named logging tags in the \" valve_status\" tag table in the same way.';
g_sepIdx[g_sepIdx.length] = 'aeb3474423e3e221447c5fe092246bbe';
g_searchEnginePlainTextArray['aeb3474423e3e221447c5fe092246bbe'] = 'Introduction The basic ingredients water, hops and malt are stored in 3 identical storage tanks. A valve on each storage tank controls the transport into the mash tun. Because the same display and control elements are used for all tanks, use the faceplate technology to implement the visualization. You define properties on a faceplate type that are parameterized for later use.  You need the following interface tags to configure the faceplate type: Interface tag Use Data type filling_level Measured fill level in the tank Int valve_status Valve status Bool temperature Measured temperature in the tank Int pressure Measured pressure in the tank Int name Name of the ingredient WString Procedure Create a new faceplate type in the project library. Locate Types under the project library in the \" Libraries\" task card.  Add a new type by double-clicking it. Configure the new faceplate type. Select the HMI \" Faceplate\" type. Select the device type \" Unified  Comfort  Panel /  WinCC  Unified  PC\". Name the faceplate type \" Tank\". Confirm your selection. Create the interface tag \" filling_level\". Click \" Tag interface\" in the work area. Add an interface tag. Name it \" filling_level\". Select the data type \" Int\". Create the remaining interface tags listed in the table for the faceplate type. Insert a bar graph for the fill level. Click \" Visualization\" in the work area. Locate \" Bar\" in the \" Toolbox\" task card under \" Elements\". Use drag-and-drop to place the element. Create a new graphic type for the visualization of the storage tank. Follow the same steps as for creating the faceplate type. Select the type \" Graphics /  Dynamic SVG\". Name the graphic type \" tank_graphic\". Confirm your selection. Insert a tank as the default graphic. Locate tanks in the \" Toolbox\" task card under \" Graphics \u003e WinCC  Graphics folder \u003e  Equipment \u003e  Automation [EMF] \u003e  Tanks\". Select the desired tank graphic. Assign the default graphic using drag-and-drop. Release the graphic type version. Click the \"!\" field in the work area. Click on \" release the version\". Name the graphic type \" tank_graphic\". Confirm your selection. Insert the graphic type in the visualization of the faceplate type. Locate the type in the \" Libraries\" task card under \" Types\" in the  Project library. Place the tank at the desired location using drag-and-drop. Create a graphic type for the valve in the same way and insert it into the visualization of the faceplate.  Locate the valve in the \" Toolbox\" task card under \" Graphics \u003e WinCC  Graphics folder \u003e  Equipment \u003e  Automation [EMF] \u003e  Valves\". Link the bar graph of the fill level with the interface tag \" filling_level\". Locate the \" Process value\" property in the Inspector window under \" General\". Select \" Tag\" for the dynamization. Select the interface tag \" filling_level\" as the process tag. Confirm your selection. Insert a text for the designation as well as a circle. Locate the elements in the \" Toolbox\" task card under \" Basic objects\". Place them at the desired location using drag-and-drop. Dynamize the background color property of the circle so that the background color changes as a function of the tag. Click on the created circle. In the Inspector window, navigate in the properties to \" Appearance\". Select \" Tag\" for dynamization of the background color. Efficiency tip To make things easier to see, you can hide property options by activating favorites . You can add and remove properties to and from favorites as required. If required, also use the function \"Hide modification events\"  since modification events are not used in Getting Started.  Specify that the background color changes as a function of the interface tag \" valve_status\". Select the interface tag \" valve_status\" as the process tag. Enable the setting \" Read only\". Select the \" Single bit\" type. Define the desired background colors for the associated process values. Adjust the size of the faceplate type. Click on the background in the faceplate. Adapt the size in Properties. Release the faceplate type in the project library.';
g_sepIdx[g_sepIdx.length] = '1bc41707ff84a065d23ba4a2b27ee31c';
g_searchEnginePlainTextArray['1bc41707ff84a065d23ba4a2b27ee31c'] = ' XML_NODE_NOTE Introduction In the following, you will learn how to create a local user management. You use roles predefined in the project for this. Creating local users Create a local user. Navigate to \" Security settings\" in the project tree. Open \" Users and roles\". Add a new local user. Name the new local user and define a password. Create two more users \" shift_supervisor\" and \" worker\". Define a password for each user. Assign the \" master_brewer\" user the predefined role \" HMI Administrator\". Roles You can also define your own user roles in the \"Roles\" tab. Assign the \" shift_supervisor\" user the predefined role \" HMI Operator\". Assign the \" worker\" user the predefined role \" HMI Monitor\". Display the rights of a user and check the assigned rights.';
g_sepIdx[g_sepIdx.length] = '38c9c18ea4445b4d67a4e225aa30c24b';
g_searchEnginePlainTextArray['38c9c18ea4445b4d67a4e225aa30c24b'] = 'Introduction The values of the elements \" Water\", \" Hop\" and \" Malt\" are stored in the program block. In the following, you insert a data block and link it to the user data type \" UDT_Beer\". Procedure Create a program block. Navigate in the PLC \" Brewery Control\" to \" Program blocks\". Add a new block. Configure the new program block \" DB_Brewery\". Click \" Data block\". Name it \" DB_Brewery\". Confirm your selection. Fill the program block. Add a new element. Name it \" Beer\". Select the user data type \" UDT_Beer\". The parameters of the user data type are added automatically.';
g_sepIdx[g_sepIdx.length] = 'e0fe9e3ad09cec1367a637c8e0cfaab8';
g_searchEnginePlainTextArray['e0fe9e3ad09cec1367a637c8e0cfaab8'] = 'Introduction In the following, you will create a parameter set type for several different beer types. The parameter set is to receive its structure through the parameter set type \" PST_Beer\". The parameter set type consists of the elements \" water\", \" hop\" and \" malt\". Element name Use Data type Unit of measurement water Quantity of water Int l hop Quantity of hops Int kg malt Quantity of malt Int kg Procedure Create a parameter set type. Navigate to \" Parameter set types\" in the project tree. Add a new parameter set type. Name it \" PST_Beer\". Select the user data type \" UDT_Beer\" from the project library as the data type. The structure is created automatically based on the selected data type. Select the \" HMI_Beer\" tag from the \" Recipe\" tag table. Specify the units of measurement for the data types.';
g_sepIdx[g_sepIdx.length] = '56b748efe792bccbafa514174f104587';
g_searchEnginePlainTextArray['56b748efe792bccbafa514174f104587'] = 'Introduction The fill levels of the three tanks and the status of the three valves are to be output on the HMI device as a trend. Procedure Insert a trend control in the HMI screen \" ProcessValues\". Open the HMI screen \" ProcessValues\". Locate the control in the \" Toolbox\" task card under \" Controls\". Place the trend control in the screen using drag-and-drop. Insert another trend area in the trend control. Click the trend control. Navigate in the properties to \" General \u003e  Trend areas\". Add an additional trend area. Specify that the trend is supplied with values by logging tags. Navigate in the properties to \" General \u003e [0]  Trend areas \u003e  Trends \u003e [0]  Trend \u003e  Data source Y\". Select \" Logging tag\" as source. Specify that the first trend is supplied with values by the logging tag \" HMI_filling_level_hop:log_hop_level\". Insert two additional trends in the first trend area. Navigate in the properties to \" General \u003e [0]  Trend areas \u003e  Trends\". Add two more trends. Specify that both trends are supplied with values by the logging tags \" HMI_filling_level_malt:log_malt_level\" and \" HMI_filling_level_water:log_water_level\". Assign a line color to the first trend. Navigate in the properties to \" General \u003e [0]  Trend areas \u003e  Trends\". Assign the desired color to the first trend under \" Line - Color\". Assign the desired line colors to the other two trends. Configure the trend in the second trend area. Navigate in the properties to \" General \u003e [1]  Trend areas \u003e  Trends \u003e [0]  Trend \u003e  Data source Y\". Specify that the first trend is supplied with values by the logging tag \" HMI_valve_status_hop:log_status_hop\". Specify the trend mode \" Stepped\" for the trend. Navigate in the properties to \" General \u003e [1]  Trend areas \u003e  Trends \u003e [0]  Trend \u003e Trend mode\". Select \" Stepped\" as the trend mode. Add two more trends and configure the properties in the same way as before. Supply the two trends with the logging tags \" HMI_valve_status_malt:log_status_malt\" and \" HMI_valve_status_water:log_status_water\". Specify the trend mode \" Stepped\" for both trends. Assign the desired line colors to the trends.';
g_sepIdx[g_sepIdx.length] = 'ed2e5c1e70a126f3c9a08cf9adca1968';
g_searchEnginePlainTextArray['ed2e5c1e70a126f3c9a08cf9adca1968'] = 'Basics An HMI screen represents the user interface of an HMI device. A plant or process is visualized with pre-defined screen objects in the HMI screen. The operator interacts with the process via the HMI screen. A screen has static and dynamic screen objects: Static screen objects do not depend on the process. Static screen objects include, for example, labels and diagrams. Dynamic screen objects change in line with the process. Dynamic screen objects typically visualize process values such as fill levels. The operator uses dynamic screen objects to intervene in the process.';
g_sepIdx[g_sepIdx.length] = '6360204c34d5bfe4d96f330bdb52e12b';
g_searchEnginePlainTextArray['6360204c34d5bfe4d96f330bdb52e12b'] = ' XML_NODE_NOTE Introduction In the following, you configure the HMI screen \" Navigation\" which is displayed in the screen window \" sw_Navigation\". Using the buttons in the HMI screen \" Navigation\", you change the screen displayed in the screen window \" sw_Content\".  The screen window \" sw_Navigation\" is hidden by default and can be shown using the \" Open Navigation\" button in the \" Header\" and hidden again using the \" \u003c\" button in the HMI screen \" Navigation\". Procedure Configure the button for closing the navigation window. Open the HMI screen \" Navigation\". Insert a button. Label the button with \"\u003c\". Insert the other buttons in the same way and label them as shown. Efficiency tip By dragging an HMI screen from the project tree to the opened screen, a button with the screen name is automatically configured as the label. Configure the button \" \u003c\" that hides the screen window \" sw_Navigation\". Add the system function \" SetPropertyValue\" to the \" Click left mouse button\" event. Specify the parameters of the system function \" SetPropertyValue\". Enter the relative path \" ../sw_Navigation\" of the screen window. Enter the screen object property name \" Visible\". Select the value \"0\". Upper and lower case Pay attention to the correct case when setting the parameters. Configure the button \" Brewery\" which shows the brewing process in the screen window \" sw_Content\". Add the system function \" ChangeScreen\" to the \" Click left mouse button\" event. Specify that the \" BreweryProcess\" screen is displayed. Select the screen name \" BreweryProcess\". Enter the relative path \" ../sw_Content\" of the screen window \" sw_Content\". Configure the \" Process Values\" button in the same way as the \" Brewery\" button. Specify the displayed parameters for the \" ChangeScreen\" system function. Configure the \" Alarms\" button in the same way as the \" Brewery\" button and specify the displayed parameters for the \" ChangeScreen\" system function. Configure the \" Production\" button in the same way as the \" Brewery\" button and specify the displayed parameters for the \" ChangeScreen\" system function.';
g_sepIdx[g_sepIdx.length] = 'd5b819f0f5961909c70d6c1604bf72a3';
g_searchEnginePlainTextArray['d5b819f0f5961909c70d6c1604bf72a3'] = 'Introduction In the following, you will learn how to configure an alarm control to display the logged alarms. Procedure Insert an alarm control in the HMI screen \" Alarms\". Open the HMI screen \" Alarms\" in the project tree. Locate the alarm control in the \" Toolbox\" task card under \" Controls\". Place the alarm control in the screen using drag-and-drop.  Configure the alarm control so that the logged alarms are displayed. Click on the alarm control. Navigate in the properties to \" General\". Select \" Logged alarms\" as alarm source.';
g_sepIdx[g_sepIdx.length] = '9ad00526e94f31398bea3165aa864888';
g_searchEnginePlainTextArray['9ad00526e94f31398bea3165aa864888'] = 'Welcome to Getting Started with WinCC Unified. Using a medium-sized brewery as an example, you will learn the first steps toward digital automation of industrial processes with WinCC Unified. Requirement For working with this Getting Started, installation of the following software is required: TIA Portal V19 WinCC Unified V19 S7-PLCSIM V19, referred to hereinafter as PLCSIM WinCC Unified Runtime V19, referred to hereinafter as Runtime Subject of the configuration The configuration in this Getting Started covers the following process steps from the brewing process shown below: Storage Mashing Configuration steps This Getting Started will familiarize you with the following configuration steps: Configuring the visualization of the brewing process Monitoring and logging the brewing process Configuring parameter sets (optional) Configuring user management Configuring screen navigation Carrying out a function test in runtime Sample project If you simply want to view the configuration steps and results presented in this Getting Started, use the \" Brewery\" project. This project contains the complete, ready-to-run project in which all the configuration steps described in the Getting Started have already been completed. The project uses a PLC and an HMI device. The HMI device is connected to the PLC via Profinet IE. The HMI device is used for operator control and monitoring of the brewing process. The PLC processes the parameters according to its programming and sends measurement data acquired by the sensors to the HMI device for the display. You can find the complete project at the  Siemens Industry Online Support (SIOS)  website under Entry ID: 109818884 \"Getting Started with WinCC Unified\" guideline The \" Getting Started with WinCC Unified \" guideline supports you in getting started with or migrating to WinCC Unified.  In a compact form, you will receive a lot of information, downloads and training offers. Configuration guidelines Before creating your first project, you should work through the \" Engineering Guideline for WinCC Unified \". It provides you with important information on how to make the most of your device\u0027s performance.  For existing projects, the guideline helps you to improve the configuration. You learn how to analyze projects to find areas for improvement.';
g_sepIdx[g_sepIdx.length] = '86a32b4c750479f74cea2abd44251821';
g_searchEnginePlainTextArray['86a32b4c750479f74cea2abd44251821'] = 'Basics WinCC Unified ensures that all events in the process sequence are recorded chronologically. Deviations from the process sequence are visualized to the system operator as alarms. WinCC Unified supports complete traceability for processing the cause of an error. An alarm contains the traceable status of the error processing with time stamp. An example of an alarm is when the level of a storage tank falls below the limit value. ';
g_sepIdx[g_sepIdx.length] = '4b292789effef9141a2ea40cde942403';
g_searchEnginePlainTextArray['4b292789effef9141a2ea40cde942403'] = 'Introduction In the following, you will configure the data exchange between the PLC and HMI device. Link HMI connection with program block Add a new tag table \" Recipe\" and create the tag \" HMI_Beer\". Select the HMI connection \" HMI_Connection_1\". Select the \" Beer\" element from the program block \" DB_Brewery\" as the PLC tag.';
g_sepIdx[g_sepIdx.length] = '2b0c8c886d8df8aff1875c9fa8d1c4bd';
g_searchEnginePlainTextArray['2b0c8c886d8df8aff1875c9fa8d1c4bd'] = 'Introduction The previously configured level alarms with the alarm class \"Alarm\" are now be logged. An alarm log is created for the logging and then assigned to the alarm class \"Alarm\". All alarms of the alarm class are logged in this alarm log.   Procedure Create an alarm log \" tank_level_alarms\". Open \" Logs\" in the project tree. Click \" Alarm logs\" in the work area. Add an alarm log and name it \" tank_level_alarms\". Assign the alarm log to the alarm class \" Alarm\". Open \" HMI alarms\" in the project tree. Click \" Alarm classes\" in the work area. Link the \" Alarm\" alarm class with the alarm log \" tank_level_alarms\".';
g_sepIdx[g_sepIdx.length] = '5a74e76f0e5d139723e2717ed03f0928';
g_searchEnginePlainTextArray['5a74e76f0e5d139723e2717ed03f0928'] = 'Requirements In the following you will add a PLC to the project and network it with the HMI device. Then you will configure a PLC data type and add it to the project library. Finally, you will also insert a data block. This is only possible if the following requirements are met: Requirement for configuration To configure a PLC, you need a \" STEP 7\" license. Requirement for testing the configuration To test the configuration of the parameter sets with \" PLCSim\", you need an installed and configured version of \" PLCSim\". For information on the installation and configuration, refer to the \" PLCSim\" function manual. If you want to test your configuration afterwards, either download the project to a real PLC or use \" PLCSim\" to simulate a PLC.';
g_sepIdx[g_sepIdx.length] = '2497eb423ae5bd046b6a18a95b55e92d';
g_searchEnginePlainTextArray['2497eb423ae5bd046b6a18a95b55e92d'] = 'Visualization of alarms Recorded alarms can be shown in an alarm control in Runtime. In this way, you can see immediately whether there are problems or errors in the system. For example, it is indicated if the fill level of a storage tank falls below a limit value and has to be refilled. Visualization of process values Current process values can be shown in a trend control in Runtime. For example, you can display the fill level of the 3 storage tanks in a separate trend for each. As a result, you can always see the current fill level clearly and know when new supplies have to be ordered and refilled. You can also display the valve status in a trend control. In this way, you can see which valve is open and when.';
g_sepIdx[g_sepIdx.length] = '6e249f9a88fe3036ce976681592cceeb';
g_searchEnginePlainTextArray['6e249f9a88fe3036ce976681592cceeb'] = ' XML_NODE_NOTE Introduction In the following, you configure the HMI screen \" Header\" which is displayed in the screen window \" sw_Header\". Use the button in the HMI screen \" Header\" to show the screen window \" sw_Navigation\" in which the operator changes the screen in the screen window \" sw_Content\".  Procedure Create a button in the HMI screen \" Header\" to open the navigation window. Open the HMI screen \" Header\". Insert a button in the screen. Locate them in the \" Toolbox\" task card under \" Elements\". Label the button with \" Open Navigation\". Add a system function to the \" Click left mouse button\" event. Click on \" Events\" in the Inspector window. Select \" Click left mouse button\". Add a function. Select the system function \" SetPropertyValue\". Specify the parameters of the system function \" SetPropertyValue\". Select \" String\" as the source for the relative path. Enter the relative path \" ../sw_Navigation\". Enter \" Visible\" as the  Screen object property name. Define the property value as \"1\". Upper and lower case Pay attention to the correct case when setting the parameters.';
g_sepIdx[g_sepIdx.length] = '63a9fab42b8d7413cbccf5a9144a0278';
g_searchEnginePlainTextArray['63a9fab42b8d7413cbccf5a9144a0278'] = 'Introduction To transfer parameter sets, you first configure a PLC and then configure the connection to the HMI device. Procedure Add a new device in the project tree. Select the controller \" 1518T-4 PN/DP\" and name it \" Brewery Control\". Click \"Controller\". Navigate to \" SIMATIC S7-1500 \u003e  CPU \u003e  CPU 1518T-4 PN/DP\" and select the Controller. Name it \" Brewery Control\". Confirm your selection. Cancel the PLC security settings. You will return to them in a later step.  Add a communications module to the HMI device. Click \" Network view\" in the work area. Open the \" Hardware catalog\" task card. Navigate to \" PC systems \u003e  Communications modules \u003e  PROFINET/Ethernet \u003e  CP 1612 (A2)\" Add the module to the HMI device using drag-and-drop. Network a port of the PLC with the new interface of the HMI device using drag-and-drop. Create the HMI connection to the PLC. Click \" Connections\". Connect the marked areas using drag-and-drop.';
