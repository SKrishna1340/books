var g_sepIdx = [];
//g_searchEnginePlainTextArray -> treeId | TopicText
var g_searchEnginePlainTextArray = [];
g_sepIdx[g_sepIdx.length] = '8c79bbffdf2b09435ebee508c938a28d';
g_searchEnginePlainTextArray['8c79bbffdf2b09435ebee508c938a28d'] = 'Bienvenue dans la Mise en route de \"WinCC Runtime Unified\". Avec l\u0027exemple d\u0027une brasserie de taille moyenne, nous vous montrons comment réaliser avec WinCC un premier pas dans la configuration de la solution de contrôle-commande pour la conduite du processus de brassage. Objet de la configuration Les étapes suivantes du processus de brassage représenté ci-dessous doivent être configurées : Macération Filtration Aromatisation La brasserie incorpore exclusivement des matières premières de la région, c\u0027est pourquoi seule une cuve de brassage est utilisée.  Étapes de configuration Dans la Mise en route, vous vous familiarisez avec les étapes de configuration suivantes : Configuration de la visualisation du processus de brassage Surveillance et consignation du processus de brassage Configuration de jeux de paramètres (facultatif) Configuration de la gestion des utilisateurs Configuration de la navigation entre vues Exécution d\u0027un test fonctionnel au runtime Exemple de projet Si vous souhaitez uniquement consulter les étapes de configuration et les résultats présentés dans ce manuel de mise en route, utilisez le projet \" Brewery\". Ce projet contient le projet terminé exécutable dans lequel toutes les étapes décrites dans le manuel de mise en route ont déjà été réalisées. Le projet comprend un automate et une IHM qui est connectée à l\u0027automate par Ethernet. L\u0027IHM permet de conduire et de superviser le processus de brassage. L\u0027automate traite les paramètres conformément à sa programmation et envoie les données de mesure des capteurs à l\u0027IHM en vue de leur visualisation.  Exemple de projet \"Brewery\" en téléchargement dans le portail SIOS';
g_sepIdx[g_sepIdx.length] = 'a1c9a2cee6b96a87ae3027826f1db09a';
g_searchEnginePlainTextArray['a1c9a2cee6b96a87ae3027826f1db09a'] = 'Principes de base Dans un projet, toutes les données sont enregistrées de manière structurée pour une solution de contrôle-commande :  un ou plusieurs pupitres opérateur y compris la communication processus et les données de configuration pour chaque pupitre-opérateur. ';
g_sepIdx[g_sepIdx.length] = 'efc52f589bd3bd70def195ee96a1b35c';
g_searchEnginePlainTextArray['efc52f589bd3bd70def195ee96a1b35c'] = 'Introduction  Pour l\u0027exemple de projet de la brasserie, un projet doit être créé. Marche à suivre Créez un nouveau projet Passez dans la vue de projet Ajoutez un nouvel appareil';
g_sepIdx[g_sepIdx.length] = '8d871b175e639ae5e580d5670a05b108';
g_searchEnginePlainTextArray['8d871b175e639ae5e580d5670a05b108'] = 'Principes de base WinCC utilise deux types de variables : Variable externes Variables internes Les variables externes constituent le lien entre WinCC et les systèmes d\u0027automation. Les valeurs des variables externes correspondent aux valeurs de processus de la mémoire d\u0027un système d\u0027automatisation. Les variables internes ne sont pas liées au processus et servent uniquement à la transmission de valeurs dans WinCC. ';
g_sepIdx[g_sepIdx.length] = 'aaddf3760e2b7bd5746fc38e6e2910b3';
g_searchEnginePlainTextArray['aaddf3760e2b7bd5746fc38e6e2910b3'] = 'Introduction Au cours du processus de brassage, les grandeurs de processus, comme les niveaux des réservoirs de stockage ou la température de la cuve de macération, sont surveillées. Pour chacune de ces grandeurs, il faut créer une variable. Ci-après, les variables affichées dans le tableau doivent être créées et organisées dans des tables de variables.  Nom de la table des variables Utilisation filling_levels Niveau des réservoirs temperature Température des réservoirs pressure Pression des réservoirs valve_status État de la vanne mash_tun États de la cuve de macération Nom de variable Utilisation Type de données Table des variables HMI_filling_level_water Niveau de remplissage de réservoir d\u0027eau Int filling_levels HMI_filling_level_hop Niveau de remplissage de réservoir de houblon Int filling_levels HMI_filling_level_malt Niveau de remplissage de réservoir de malt Int filling_levels HMI_valve_status_water État de la vanne de réservoir d\u0027eau ouvert/fermé Bool valve_status HMI_valve_status_hop État de la vanne de réservoir de houblon ouvert/fermé Bool valve_status HMI_valve_status_malt État de la vanne de réservoir de malt ouvert/fermé Bool valve_status HMI_filling_level_mash_tun Niveau de remplissage de la cuve de macération Int mash_tun HMI_temperature_mash_tun Température de la cuve de macération Int mash_tun HMI_mash_tun_heating Chauffage actif/inactif Bool mash_tun HMI_pressure_water Pression du réservoir d\u0027eau Int pressure HMI_pressure_hop Pression du réservoir de houblon Int pressure HMI_pressure_malt Pression du réservoir de malt Int pressure HMI_temperature_water Température du réservoir d\u0027eau Int temperature HMI_temperature_hop Température du réservoir de houblon Int temperature HMI_temperature_malt Température du réservoir de malt Int temperature Marche à suivre Créez une table des variables et ajoutez-y une variable. Donnez un nom à la variable et sélectionnez le type de données. Créez les autres variables de la même façon. Vérifiez les résultats en affichant toutes les variables.';
g_sepIdx[g_sepIdx.length] = '394b6f060e73307cf9f6ef7a813c43df';
g_searchEnginePlainTextArray['394b6f060e73307cf9f6ef7a813c43df'] = 'Principes de base Une vue IHM représente l\u0027interface utilisateur d\u0027une station de contrôle-commande. Une installation ou un processus sont visualisés dans la vue IHM avec des objets graphiques prédéfinis. L\u0027opérateur interagit avec le processus via la vue IHM. Une vue est composée d\u0027objets graphiques statiques et dynamiques : Les objets graphiques statiques sont indépendants du processus. Les objets graphiques statiques sont par exemple des inscriptions et des graphiques. Les objets graphiques dynamiques sont modifiés en fonction du processus. Les objets graphiques dynamiques visualisent typiquement les valeurs de processus comme les niveaux de remplissage. L\u0027opérateur intervient dans le processus via les objets graphiques dynamiques.';
g_sepIdx[g_sepIdx.length] = '8899f3eb214829f70508723eac6eca10';
g_searchEnginePlainTextArray['8899f3eb214829f70508723eac6eca10'] = 'Introduction Nom de vue IHM Type de vue Utilisation Taille en pixels BreweryOverview Vue initiale Vue d\u0027ensemble pour le contrôle-commande du processus de brassage 1440x900 BreweryProcess Conduite de processus Visualisation du processus de brassage 1440x800 Alarms Conduite de processus Vue d\u0027ensemble des alarmes du processus ProcessValues Conduite de processus Vue d\u0027ensemble des valeurs de processus archivées ProductCtrl Conduite de processus Commande de la production Header Navigation Vue pour l\u0027ouverture de la navigation entre les vues de la conduite de processus 1440x100 Navigation Navigation Vue pour la navigation entre les vues de la conduite de processus 250x300 Marche à suivre Créez la vue IHM pour la visualisation de la vue initiale. Adaptez la taille de la vue IHM. Créez de la même façon les autres vues IHM et définissez la taille de vue dans le tableau ci-dessus.';
g_sepIdx[g_sepIdx.length] = 'f55011b52993d6f91ee99b291ed56236';
g_searchEnginePlainTextArray['f55011b52993d6f91ee99b291ed56236'] = 'Fonction Vous créez la navigation entre vues avec la technique de fenêtres de vue. Dans une vue d\u0027ensemble, vous insérez les fenêtres de vue suivantes qui accomplissent différentes tâches : Header L\u0027en-tête vous permet d\u0027afficher une fenêtre de navigation. Navigation Les boutons de la fenêtre de navigation permettent à l\u0027utilisateur de modifier le contenu de la fenêtre Content. Par défaut, la fenêtre de navigation est masquée. Content La fenêtre Content affiche des informations sur l\u0027installation. Par exemple, le niveau de remplissage des réservoirs ou les alarmes de l\u0027installation sont affichés. Vous définissez le contenu des fenêtres de vue via les vues IHM. Vous créez dans ce paragraphe toutes les vues IHM dont vous avez besoin pour réaliser la navigation entre vues. Template Suite Les installations et les machines sont de plus en plus complexes et des exigences croissantes sont ainsi posées à l\u0027opérateur d\u0027une installation. Une interface utilisateur intuitive et à l\u0027apparence conviviale entre l\u0027homme et la machine gagne donc en importance.  La  HMI Template Suite vous propose à cet effet des modèles et des idées pour rendre claire et moderne la configuration de votre pupitre-opérateur IHM. L\u0027apparence et la conception mettent l\u0027accent sur la fluidité d\u0027utilisation, la clarté et l\u0027extensibilité. Vous pouvez ainsi simplifier l\u0027utilisation de votre machine et réduire les erreurs de commande.  Dans l\u0027exemple d\u0027application suivant, vous apprenez à travailler avec  HMI Template Suite : Exemple d\u0027application \"Template Suite\"';
g_sepIdx[g_sepIdx.length] = '8ca8e8114998af0f5b4d378e701e8114';
g_searchEnginePlainTextArray['8ca8e8114998af0f5b4d378e701e8114'] = 'Principes de base Les faceplates ou blocs d\u0027affichage sont des groupes personnalisés d\u0027objets d\u0027affichage et de commande qui sont enregistrés, gérés et édités de manière centralisée dans le projet. Vous procédez à toutes les modifications du faceplate dans le projet de manière centralisée dans le type de faceplate. De manière idéale, vous vous servez de faceplates pour des objets ou parties d\u0027installation que vous utilisez plusieurs fois et qui possèdent des structures de données identiques. Pour que la capacité de modification centrale soit prise en charge, les faceplates se basent sur un modèle d\u0027instance-type : Vous créez les propriétés pour des instances de faceplate de manière centralisée dans le type de faceplate. Les instances représentent les occurrences locales du type de faceplate.';
g_sepIdx[g_sepIdx.length] = '8fd805f9f33db653a1628eb449c64ad3';
g_searchEnginePlainTextArray['8fd805f9f33db653a1628eb449c64ad3'] = 'Introduction Les ingrédients de base (l\u0027eau, le houblon et le malt) sont stockés dans trois réservoirs de stockage de construction identique. Sur chaque réservoir de stockage, une vanne commande le transport dans la cuve de macération. Les mêmes éléments d\u0027affichage et de commande étant utilisés pour tous les réservoirs, vous utilisez les faceplates pour réaliser la visualisation. Dans un type de faceplate, vous définissez les propriétés à paramétrer lors de la prochaine utilisation.  Pour la configuration du type de faceplate, vous avez besoin des propriétés suivantes : Propriété Utilisation Type de données filling_level Niveau de remplissage mesuré dans le réservoir Int valve_status État de la vanne Bool temperature Température mesurée dans le réservoir Int pressure Pression mesurée dans le réservoir Int name Nom de l\u0027ingrédient WString Marche à suivre Créez un nouveau type de faceplate dans la bibliothèque. Configurez le nouveau type de faceplate. Créez la propriété \" filling_level\" pour le type de faceplate. Créez les autres propriétés indiquées dans le tableau pour le type de faceplate. Ajoutez le bargraphe pour le niveau de remplissage. Créez un nouveau type de graphique pour la visualisation du réservoir de stockage. Insérez un réservoir en tant que graphique standard. Vous trouverez le réservoir dans la boîte à outils (Toolbox) sous \" Graphics \u003e WinCC graphics folder \u003e Equipment \u003e Automation (EMF) \u003e Tanks\". Validez la version du type de graphique. Insérez le type de graphique dans la vue. Créez de la même façon un type de graphique pour la vanne et insérez-le dans la vue. Vous trouverez la vanne dans la boîte à outils (Toolbox) sous \" Graphics \u003e WinCC graphics folder \u003e Equipment \u003e Automation (EMF) \u003e Valves\". Reliez la propriété d\u0027affichage du niveau de remplissage au bargraphe.   Ajoutez un champ de texte pour la désignation, ainsi qu\u0027un cercle. Le champ de texte n\u0027est pas encore connecté dans cette Mise en route.  Paramétrez le cercle, de sorte que sa couleur d\u0027arrière-plan puisse être modifiée via une variable (1, 2). Affichez ensuite la zone de paramétrage de variable (3).  Définissez l\u0027état de vanne comme variable pour la couleur et définissez la correspondance entre les couleurs et les états de variable. Adaptez la taille du faceplate. Sélectionnez ensuite avec \u003cCtrl + clic\u003e les objets \"Réservoir\", \"Vanne\" et \"Affichage du niveau de remplissage\" et définissez la transparence sur \"100 %\".  Validez le type de faceplate dans la bibliothèque.';
g_sepIdx[g_sepIdx.length] = 'e7365ad4057ef4c4de223645e95c2257';
g_searchEnginePlainTextArray['e7365ad4057ef4c4de223645e95c2257'] = 'Introduction Sur la base du type de faceplate créé, les réservoirs de stockage des ingrédients pour la bière doivent à présent être visualisés. Pour chaque réservoir de stockage, vous ajoutez une instance du type de faceplate et vous paramétrez les propriétés avec les variables correspondantes. Marche à suivre Ouvrez la vue IHM  \"BreweryProcess\" et créez à partir du type de faceplate l\u0027instance du réservoir de stockage contenant l\u0027eau.  Paramétrez la propriété \" pressure\" de l\u0027instance de faceplate avec la variable \" HMI_pressure_water\". Paramétrez de la même manière les autres propriétés de l\u0027instance de faceplate. Visualisez et paramétrez de la même façon le réservoir de stockage \"Houblon\". Visualisez et paramétrez de la même façon le réservoir de stockage \"Malt\".';
g_sepIdx[g_sepIdx.length] = '3ea41680b675ae9da1f17efb61c42e46';
g_searchEnginePlainTextArray['3ea41680b675ae9da1f17efb61c42e46'] = 'Introduction Ci-après, la vue de processus déjà créée comprenant les trois réservoirs de stockage (eau, houblon et malt) doit être complétée avec les autres composants du processus de brassage. À cette fin, une cuve de macération est ajoutée et reliée aux réservoirs de stockage avec des tuyaux. Une source de chaleur qui réchauffe la cuve de macération est ajoutée. En plus des éléments graphiques, des éléments d\u0027affichage pour les valeurs de processus de la cuve de macération doivent être ajoutés. Marche à suivre Ajoutez le réservoir qui représente la cuve de macération. Utilisez des images de tuyaux pour compléter la vue IHM. Ajoutez le graphique de la source de chaleur représentée. Ajoutez un affichage de valeur pour la variable de niveau de remplissage  \"HMI_filling_level_mash_tun\" du conteneur. Lorsque vous faites glisser une variable dans la vue IHM, une zone d\u0027E/S reliée à cette variable est automatiquement créée.  Insérez un champ de texte pour la désignation de la variable.';
g_sepIdx[g_sepIdx.length] = '7bc36370ef37eac5758153071e39be2d';
g_searchEnginePlainTextArray['7bc36370ef37eac5758153071e39be2d'] = 'Introduction Ci-après, une fenêtre contextuelle pour des faceplates doit être configurée, dans laquelle un clic sur l\u0027un des réservoirs de stockage permet d\u0027afficher des informations supplémentaires sur le niveau de remplissage, la température et la pression. Marche à suivre Dupliquez le faceplate du réservoir dans la bibliothèque. Toutes les variables d\u0027interface du type de faceplate \"Réservoir\" sont ainsi appliquées dans le nouveau faceplate. Définissez les propriétés du nouveau type de faceplate. Ouvrez le nouveau type de faceplate en vue de son édition. Supprimez les éléments graphiques du faceplate copié. Ajoutez le champ de texte pour le niveau de remplissage.  Ajoutez le champ de sortie pour le niveau de remplissage. Connectez le champ de sortie avec la variable d\u0027interface \" filling level\". Configurez les champs de texte et les champs de sortie de température et de pression et reliez les champs de sortie aux variables d\u0027interface \" temperature\" et \" pressure\". Adaptez la taille du faceplate. Validez la fenêtre contextuelle pour le faceplate dans la bibliothèque. Ouvrez le type de faceplate \" Tank\" dans la bibliothèque en vue de son édition. Créez un événement déclenché sur le réservoir par un clic gauche. Ajoutez le modèle de script pour l\u0027ouverture d\u0027un faceplate comme fenêtre contextuelle. Ajoutez dans le script le nom du faceplate nouvellement créé, ainsi qu\u0027une désignation. Validez le type de faceplate dans la bibliothèque et activez l\u0027option d\u0027actualisation des instances dans le projet. Résultat La fenêtre contextuelle des faceplates est créée et affichée au runtime avec les informations configurées par un clic sur l\u0027un des réservoirs de stockage.';
g_sepIdx[g_sepIdx.length] = 'f59f43027a6aab5a12ac5b902d23f36a';
g_searchEnginePlainTextArray['f59f43027a6aab5a12ac5b902d23f36a'] = 'Principes de base WinCC permet d\u0027acquérir de façon chronologique tous les événements dans le déroulement du processus. Les divergences dans le déroulement du processus sont visualisées par l\u0027opérateur de l\u0027installation sous forme d\u0027alarmes. WinCC prend en charge la traçabilité intégrale lors du traitement d\u0027une cause d\u0027erreur. Une alarme comprend l\u0027état traçable du traitement des erreurs avec un horodatage. Une alarme peut p. ex. concerner le dépassement par le bas de la valeur limite du niveau de remplissage d\u0027un réservoir de stockage. ';
g_sepIdx[g_sepIdx.length] = 'cd3582d3ca6c8abe4623f644dec94d31';
g_searchEnginePlainTextArray['cd3582d3ca6c8abe4623f644dec94d31'] = 'Introduction Ci-après, un message doit être configuré qui sera déclenché lorsque le niveau de remplissage de l\u0027un des réservoirs de stockage passe sous une valeur définie. Les messages suivants doivent être configurées pour les réservoirs de stockage des ingrédients. Nom Texte d\u0027alarme Variable surveillée Classe de messages Valeur limite alarm_level_water \" filling level water low\" HMI_filling_level_water  Alarme 50 l alarm_level_malt \" filling level malt low\" HMI_filling_level_malt Alarme 50 l alarm_level_hop \" filling level hop low\" HMI_filling_level_hop  Alarme 50 l Marche à suivre Ouvrez la vue d\u0027ensemble des alarmes. Créez les messages pour les dépassements de seuil du niveau de remplissage. Créez les autres messages de la même façon.';
g_sepIdx[g_sepIdx.length] = '22bcc9724aa1443295a7442f4dcde0c4';
g_searchEnginePlainTextArray['22bcc9724aa1443295a7442f4dcde0c4'] = 'Principes de base L\u0027archivage est un procédé destiné à l\u0027analyse des états d\u0027erreur et à la documentation du processus. L\u0027évaluation des données archivées vous permet de prendre les mesures d\u0027optimisation des cycles de maintenance ou d\u0027augmentation de la qualité produit. Dans WinCC, vous sélectionnez durant la configuration les classes d\u0027alarmes et les variables à archiver en cours de processus. À des fins d\u0027évaluation ultérieure, vous sélectionnez la période pour laquelle vous voulez p. ex. afficher des alarmes. ';
g_sepIdx[g_sepIdx.length] = 'b47369b06eb865149e75019b40a518c6';
g_searchEnginePlainTextArray['b47369b06eb865149e75019b40a518c6'] = 'Introduction Les messages de niveau de remplissage préalablement configurés avec la classe de messages \"Alarme\" doivent à présent être archivés. Pour l\u0027archivage, une archive de messages est créée, puis enregistrée dans la classe d\u0027alarme \"Alarme\". Toutes les messages de la classe d\u0027alarmes sont archivées dans cette archive de messages.   Marche à suivre Créez une nouvelle archive de messages dans laquelle les messages du dépassement de seuil doivent être archivés. Enregistrez l\u0027archive de messages dans la classe de messages.';
g_sepIdx[g_sepIdx.length] = '2cead40dbf5f5af592fa194f78249781';
g_searchEnginePlainTextArray['2cead40dbf5f5af592fa194f78249781'] = 'Introduction Les valeurs de processus des niveaux de remplissage dans les réservoirs de stockage et dans la cuve de macération doivent être archivées. À cette fin, une variable d\u0027archive doit être créée pour chaque variable, puis affectée à une archive de variables. Nom de variable d\u0027archives Archivage des valeurs de processus à partir de la variable Type de données Archive de variables log_water_level HMI_filling_level_water Int filling_levels log_hop_level HMI_filling_level_hop Int filling_levels log_malt_level HMI_filling_level_malt Int filling_levels log_mash_tun_level HMI_filling_level_mash_tun Int filling_levels log_status_water HMI_valve_status_water Bool valve_status log_status_hop HMI_valve_status_hop Bool valve_status log_status_malt HMI_valve_status_malt Bool valve_status Marche à suivre Créez une archive de variables ayant pour nom \" \"filling_levels\"\". Ouvrez la table des variables \" filling_levels\" et créez pour chaque variable nommée ci-dessus une variable d\u0027archive. Affectez les variables d\u0027archive à l\u0027archive de variables \" filling_levels\". Ouvrez la table des variables \" mash_tun\" et créez pour chaque variable nommée ci-dessus une variable d\u0027archive. Affectez les variables d\u0027archive à l\u0027archive de variables \" filling_levels\". Créez de la même façon une archive de variables \" valve_status\". Ouvrez la table des variables \" valve_status\" et créez de la même façon pour chaque variable nommée ci-dessus une variable d\u0027archive. Affectez les variables d\u0027archive à l\u0027archive de variables \" valve_status\".';
g_sepIdx[g_sepIdx.length] = '8494675ee2e1d7b7e6279abbc403ac6b';
g_searchEnginePlainTextArray['8494675ee2e1d7b7e6279abbc403ac6b'] = 'Visualisation d\u0027alarmes Les alarmes acquises peuvent être représentées au runtime dans une vue des alarmes. Vous pouvez ainsi directement identifier des problèmes ou des erreurs dans l\u0027installation. Par exemple, le système indique qu\u0027une valeur limite de niveau est dépassée par le bas pour un réservoir de stockage et que ce dernier doit à nouveau être rempli. Visualisation de valeurs de processus Des valeurs de processus actuelles peuvent être représentées au runtime dans une vue de courbes. Par exemple, elles représentent le niveau de remplissage des trois réservoirs de stockage dans des courbes respectives. Vous pouvez ainsi toujours prendre connaissance de façon claire du niveau de remplissage actuel et vous savez à quel moment un nouveau stock doit être commandé en vue du remplissage. Par ailleurs, vous pouvez également représenter l\u0027état de vanne dans une vue de courbes. Vous pouvez ainsi voir quelle vanne est ouverte à quel moment.';
g_sepIdx[g_sepIdx.length] = '9ffd78adc609cc5c6cc662b0715d537f';
g_searchEnginePlainTextArray['9ffd78adc609cc5c6cc662b0715d537f'] = 'Introduction Dans ce chapitre, vous apprenez comment configurer une vue des alarmes pour la représentation des alarmes archivées. Conditions requises L\u0027archive d\u0027alarmes a été créée. Marche à suivre Ouvrez la vue \" Alarms\" et insérez-y une vue des alarmes. Configurez la vue des alarmes de manière à ce que les alarmes archivées s\u0027affichent. Résultat La vue des alarmes pour la représentation des alarmes archivées est configurée.';
g_sepIdx[g_sepIdx.length] = 'd3eacd3df898313c4d84a9edf44059d4';
g_searchEnginePlainTextArray['d3eacd3df898313c4d84a9edf44059d4'] = 'Introduction Les niveaux de remplissage des trois réservoirs et l\u0027état des trois vannes doivent être affichés sous forme de courbes sur le pupitre opérateur. Conditions Les niveaux de remplissage des 3 réservoirs sont créés comme variables archivées \" log_hop_level\", \" log_malt_level\" et \" log_water_level\". Les états des 3 réservoirs sont créés comme variables archivées \" log_status_hop\", \" log_status_malt\" et \" log_status_water\". Marche à suivre Ouvrez la vue \" ProcessValues\" et insérez-y une vue de courbes. Ajoutez les deux plages de courbe dans la vue de courbes. Configurez la première vue de courbes avec les niveaux de remplissage : Définissez que la première courbe est basée sur des variables archivées. Définissez que la première courbe est basée sur les valeurs de la variable archivée \" log_hop_level\". Ajoutez deux autres courbes dans la première vue de courbes. Définissez que les deux courbes sont basées sur les valeurs des variables archivées \" log_malt_level\" et \" log_water_level\". Affectez à la première courbe la couleur de ligne souhaitée. Affectez aux deux autres courbes les couleurs de ligne souhaitées. Configurez la seconde vue de courbes avec l\u0027état de vanne : Définissez que la première courbe est basée sur des variables archivées. Définissez que la première courbe est basée sur les valeurs de la variable archivée \" log_status_hop\". Définissez pour la première courbe le mode de courbe \" Stepped\". Ajoutez deux autres courbes dans la seconde vue de courbes. Indiquez que les deux courbes sont basées sur les valeurs des variables archivées \" log_status_malt\" et \" log_status_water\" et définissez le mode de courbe \" Stepped\" pour les deux courbes. Affectez à la première courbe la couleur de ligne souhaitée. Affectez aux deux autres courbes les couleurs de ligne souhaitées. Résultat La vue de courbes pour la représentation des niveaux de remplissage et des états de vanne est configurée.';
g_sepIdx[g_sepIdx.length] = '43dd2ff4fe5d7e182a0debe8493ab64c';
g_searchEnginePlainTextArray['43dd2ff4fe5d7e182a0debe8493ab64c'] = 'Type de jeu de paramètres Un type de jeu de paramètres (ou type d\u0027enregistrement) sert à définir les paramètres ainsi que leurs propriétés selon lesquels un produit sera fabriqué. Un type de jeu de paramètres est un modèle pour des produits différents ayant les mêmes ingrédients de base.  Aucune valeur de paramètre concrète n\u0027est sauvegardée dans un type de jeu de paramètres. Pour cela, un jeu de paramètres (ou enregistrement) est créé au moyen du type de jeu de paramètres pour chaque produit à fabriquer, par exemple bière blanche ou bière blonde. Il est conseillé d\u0027utiliser des jeux de paramètres lorsque l\u0027on change souvent entre produits ayant une composition similaire. Il est possible de passer rapidement à un autre produit dans le processus. Les modifications de base de la structure sont effectuées de manière centralisée au niveau du type de jeu de paramètres. Jeux de paramètres dans le processus de brassage Le maître brasseur crée ou importe un ou plusieurs jeux de paramètres. Le chef d\u0027équipe choisit le jeu de paramètres pour le produit à fabriquer. Le jeu de paramètres est transmis de l\u0027IHM à l\u0027automate et le processus de brassage commence. L\u0027automate exécute le programme utilisateur et utilise les valeurs de paramètre des ingrédients de base pour la fabrication. Les différents ingrédients sont amenés à la cuve de macération. Le processus de brassage se poursuit conformément au programme utilisateur.';
g_sepIdx[g_sepIdx.length] = '5288ba7ac44143b01ec97f440865792f';
g_searchEnginePlainTextArray['5288ba7ac44143b01ec97f440865792f'] = 'Introduction Dans cette partie, vous allez configurer un type de jeu de paramètres. Pour cela, vous devez configurer un automate. Si vous souhaitez ensuite tester votre configuration, chargez le projet dans un automate réel ou bien utilisez \" PLCSim\" pour simuler un automate. Conditions Condition pour la configuration Vous avez besoin d\u0027une licence \" STEP 7\" pour configurer un automate Condition pour tester la configuration Pour tester la configuration des jeux de paramètres avec \" PLCSim\", vous avez besoin d\u0027une version installée et configurée de \" PLCSim\". Vous trouverez des informations sur l\u0027installation et la configuration dans la description fonctionnelle de \" PLCSim\". Marche à suivre Pour la communication entre l\u0027IHM et l\u0027automate, exécutez les étapes suivantes dans l\u0027automate : Ajoutez un automate avec lequel l\u0027IHM peut communiquer. Créez un type de données utilisateur (UDT). Créez un bloc de programme et enregistrez l\u0027UDT comme type de données. Côté IHM, connectez l\u0027IHM à l\u0027automate, puis configurez le type de jeu de paramètres. Exécutez à cette fin les étapes suivantes : Reliez la connexion entre IHM et automate au bloc de programme par le biais d\u0027une variable IHM. Créez le type de jeu de paramètres. Insérez la vue des jeux de paramètres dans le panneau de commande de l\u0027IHM.';
g_sepIdx[g_sepIdx.length] = '8fc08deb70bbbab8290f53e71dd25302';
g_searchEnginePlainTextArray['8fc08deb70bbbab8290f53e71dd25302'] = 'Introduction Pour transférer les jeux de paramètres, configurez d\u0027abord un automate, puis la connexion à l\u0027IHM. Marche à suivre Ajoutez un nouvel appareil. Sélectionnez l\u0027automate \" 1518T-4 PN/DP\" et renommez-le \" Brewery Control\". Allez dans \"Appareils \u0026 réseaux\". Ajoutez le module de communication \" CP 1612 (A2)\" à l\u0027IHM. Mettez l\u0027automate et la nouvelle interface de l\u0027IHM en réseau. La connexion IHM entre l\u0027IHM et l\u0027automate est alors automatiquement établie.';
g_sepIdx[g_sepIdx.length] = '4a449ba928c003de1ae9c4c393e063ab';
g_searchEnginePlainTextArray['4a449ba928c003de1ae9c4c393e063ab'] = 'Introduction Dans cette partie, vous allez créer un type de données utilisateur dans l\u0027automate et l\u0027ajouter à la bibliothèque du projet. Ce type de données utilisateur servira plus tard de base pour le type de jeu de paramètres. Les éléments suivants doivent être créés dans le type de données utilisateur : Nom d\u0027élément Utilisation Type de données water Quantité d\u0027eau Int hop Quantité de houblon Int malt Quantité de malt Int Créer un type de données utilisateur et l\u0027ajouter à la bibliothèque Ajoutez un nouveau type de données. Nommez le type de données utilisateur \" UDT_Beer\" et ajoutez les éléments \" Water\", \" Hop\" et \" Malt\". Sélectionnez le type de données \" Int\" pour tous les éléments. Ajoutez le nouveau type de données utilisateur à la bibliothèque du projet. Donnez le nom \" UDT_Beer\" au type de données utilisateur dans la bibliothèque.';
g_sepIdx[g_sepIdx.length] = '2a15dae3d779f47d2ad558ceeb130352';
g_searchEnginePlainTextArray['2a15dae3d779f47d2ad558ceeb130352'] = 'Introduction Les valeurs des éléments \" Water\", \" Hop\" et \" Malt\" sont enregistrées dans le bloc de programme. Dans cette partie, vous allez ajouter un bloc de données et lui affecter le type de données utilisateur \" UDT_Beer\". Marche à suivre Ajoutez un nouveau bloc de programme. Nommez le nouveau bloc de données \" DB_Brewery\". Créez un nouvel élément \" Beer\" et utilisez le type de données utilisateur comme type de données. Les paramètres du type de données utilisateur sont automatiquement ajoutés.';
g_sepIdx[g_sepIdx.length] = 'e83c375579719e119021ee3a6528f09a';
g_searchEnginePlainTextArray['e83c375579719e119021ee3a6528f09a'] = 'Introduction Dans cette partie, vous allez configurer l\u0027échange de données entre l\u0027automate et le pupitre opérateur IHM. Relier la connexion IHM au bloc de programme Ajoutez une nouvelle table de variables \" Recipe\" et créez un paramètre \" HMI_Beer\". Sélectionnez la connexion IHM. Sélectionnez le type de données API \" Beer\" créé précédemment pour le bloc de données.';
g_sepIdx[g_sepIdx.length] = '00be830658fcb99f8091bd747221757c';
g_searchEnginePlainTextArray['00be830658fcb99f8091bd747221757c'] = 'Introduction Dans cette partie, vous allez créer un type de jeu de paramètres pour plusieurs sortes de bière. Le jeu de paramètres doit obtenir sa structure du type de jeu de paramètres \" \"PST_Beer\"\". Le type de jeu de paramètres est constitué des éléments  \"water\",  \"hop\" et  \"malt\". Nom d\u0027élément Utilisation Type de données Unité de mesure water Quantité d\u0027eau Int l hop Quantité de houblon Int kg malt Quantité de malt Int kg Marche à suivre Ajoutez un nouveau type de jeu de paramètres et donnez-lui le nom \" PST_Beer\". Sélectionnez le type de données utilisateur \" UDT_Beer\" comme type de données. La structure est créée automatiquement sur la base du type de données utilisateur. Sélectionnez la variable \" Beer\". Définissez les unités de mesure pour les types de données.';
g_sepIdx[g_sepIdx.length] = 'd0016df7e4c986f91a49b4cec65dc46c';
g_searchEnginePlainTextArray['d0016df7e4c986f91a49b4cec65dc46c'] = 'Introduction Dans cette partie, vous allez configurer la vue des jeux de paramètres. La vue des jeux de paramètres permet de créer et d\u0027éditer les jeux de paramètres au runtime. Marche à suivre Insérez la vue des jeux de paramètres dans la vue IHM \" ProductCtrl\". Reliez le type de jeu de paramètres à la vue des jeux de paramètres.';
g_sepIdx[g_sepIdx.length] = '97da620fc784de1441258bf51cb013a7';
g_searchEnginePlainTextArray['97da620fc784de1441258bf51cb013a7'] = 'Introduction Pour créer la connexion à PLCSim, définissez les droits d\u0027accès à l\u0027API et configurez ensuite la connexion. Lorsque vous démarrez la simulation, la fenêtre de commande de PLCSim s\u0027ouvre. Les boutons Run et Stop vous permettent de commander la simulation. Si vous suivez la procédure expliquée, aucune intervention dans la fenêtre de commande n\u0027est nécessaire.  Au cours de la procédure, vous désactivez les fonctions de protection des données confidentielles et les restrictions d\u0027accès à la commande.  Ces fonctions sont désactivées afin de faciliter la simulation. Dans l\u0027environnement de processus réel, ces accès doivent être limités. Dans les systèmes d\u0027automatisation, le strict maintien de la sûreté de fonctionnement et la protection de la vie et de l\u0027intégrité physique sont primordiaux. Pour cela, il est impérativement nécessaire de maintenir la disponibilité du système et donc le contrôle sans restriction du processus. Marche à suivre Ouvrez les Propriétés de l\u0027automate \"Brewery Control\". Désactivez la fonction de protection des données de configuration API confidentielles et sélectionnez le niveau de protection \"Accès intégral\" pour l\u0027automate. Démarrez la simulation. Recherchez un appareil cible et sélectionnez-le. Contrôlez les réglages et chargez les données. Terminez la procédure de chargement. Établissez une \"liaison en ligne\". Résultat La liaison est établie.';
g_sepIdx[g_sepIdx.length] = 'f5ad851385b46bf71b35d072364fd27d';
g_searchEnginePlainTextArray['f5ad851385b46bf71b35d072364fd27d'] = 'Principes de base WinCC permet de restreindre les actions utilisateur relevant de la sécurité à des utilisateurs donnés et ainsi de protéger des données et fonctions au runtime contre des accès non autorisés. Vous créez des utilisateurs et leur attribuez des autorisations. Vous configurez les autorisations nécessaires à l\u0027utilisation des objets relatifs à la sécurité dans ces objets. Les utilisateurs doivent s\u0027identifier au runtime en saisissant leur nom d\u0027utilisateur et leur mot de passe. Si l\u0027utilisateur bénéficie de l\u0027autorisation requise, l\u0027action est exécutée. Lorsqu\u0027un rôle est affecté à un utilisateur, cet utilisateur obtient les droits qui y sont associés. Les rôles et les droits correspondants peuvent se présenter comme suit pour un processus de brassage : Maître brasseur Chef d\u0027équipe Opérateur Peut visualiser le processus. x x x Peut conduire le processus. x x Peut modifier les recettes. x La gestion des utilisateurs peut se faire au niveau global ou local. Gestion globale et locale des utilisateurs La gestion locale des utilisateurs se fait dans le projet. Les utilisateurs sont créés par le concepteur et n\u0027existent que dans ce projet. Le concepteur définit les droits des différents rôles et affecte leur rôle aux utilisateurs. Si un utilisateur doit être ajouté ou supprimé a posteriori, il faut modifier le projet. La gestion locale des utilisateurs est intéressante lorsqu\u0027il n\u0027y a qu\u0027un projet à créer et à gérer, une seule brasserie par exemple. Dans la gestion globale des utilisateurs, les utilisateurs sont découplés du rôle dans le projet. Les utilisateurs sont gérés de manière centralisée sur un serveur externe. Ils sont créés sur le serveur externe et organisés en groupes correspondant à leur future mission. Le concepteur ne crée pas d\u0027utilisateurs dans le projet. Il importe les groupes du serveur externe et leur affecte les rôles correspondants. Pour ajouter des utilisateurs a posteriori, il faut les créer sur le serveur externe et les affecter à un groupe existant. Ils reçoivent ainsi automatiquement le rôle qui est affecté au groupe dans le projet concerné. Aucune modification n\u0027est nécessaire dans le projet.  La gestion globale des utilisateurs convient particulièrement en cas de maintenance centralisée de plusieurs projets, Par exemple lorsqu\u0027une même entreprise gère plusieurs brasseries ou lorsque l\u0027on fait souvent appel à de nouveaux collaborateurs.';
g_sepIdx[g_sepIdx.length] = '54ef26d7006ca83ea81a2eaac10b5820';
g_searchEnginePlainTextArray['54ef26d7006ca83ea81a2eaac10b5820'] = ' XML_NODE_NOTE Introduction Ci-après, vous apprenez comment créer une gestion des utilisateurs locale. Créer des utilisateurs locaux Définissez un nouvel utilisateur local. Donnez un nom aux nouveaux utilisateurs locaux et définissez un mot de passe. Les noms d\u0027utilisateur ne doivent pas contenir de caractères d\u0027espacement. Créez deux nouveaux utilisateurs et définissez un mot de passe pour chaque utilisateur. Affectez à l\u0027utilisateur \" masterbrewer\" le rôle \" HMI Administrator\". Affectez à l\u0027utilisateur \" shiftsupervisor\" le rôle \" HMI Operator\". Affectez à l\u0027utilisateur \" worker\" le rôle \" HMI Monitor\". Affichez les droits d\u0027un utilisateur et vérifiez-les. Vous pouvez, au besoin, définir des rôles utilisateurs propres.';
g_sepIdx[g_sepIdx.length] = '5e0bc357d8fffe5020f08d5a266872a7';
g_searchEnginePlainTextArray['5e0bc357d8fffe5020f08d5a266872a7'] = 'Principes de base En règle générale, la visualisation de processus est répartie sur plusieurs vues, selon des critères fonctionnels ou technologiques par exemple. Le passage d\u0027une vue à une autre est appelé navigation entre vues.';
g_sepIdx[g_sepIdx.length] = 'fa162268dd280668d5335ba55cb814e2';
g_searchEnginePlainTextArray['fa162268dd280668d5335ba55cb814e2'] = 'Principes de base La technique de fenêtres de vue vous permet de réaliser la navigation entre vues. À l\u0027aide de fenêtres de vue, vous partagez la vue d\u0027ensemble en trois parties et vous définissez les vues IHM à afficher dans chaque fenêtre de vue. La fenêtre de vue \" sw_Content\" affiche des informations sur l\u0027installation, p. ex. le processus de brassage, des alarmes ou des valeurs de processus. Les fenêtres de vue \" sw_Header\" et \" sw_Navigation\" affichent les vues IHM utilisées pour la navigation. Le bouton \" Open Navigation\" dans la vue IHM \" Header\" vous permet d\u0027afficher la vue IHM \" Navigation\". Via le bouton dans la vue IHM \" Navigation\", l\u0027utilisateur change au runtime les vues dans la fenêtre de vue \" sw_Content\". Configuration Ce paragraphe vous permet d\u0027effectuer les opérations suivantes : Insertion et configuration de fenêtres de vue Configuration de boutons pour afficher/masquer des fenêtres de vue via la fonction système \" SetPropertyValue\" Configuration de boutons pour changer le contenu d\u0027une fenêtre de vue via la fonction système \" ChangeScreen\"';
g_sepIdx[g_sepIdx.length] = '445628e991dc3b999f1629c5ed54608c';
g_searchEnginePlainTextArray['445628e991dc3b999f1629c5ed54608c'] = 'Introduction Vous réalisez la navigation entre vues avec la \"technique de fenêtres de vue\". Avec la technique de fenêtres de vue, vous réalisez une représentation vue-dans-vue : Les changements de vue sont effectués dans la fenêtre de vue. La vue racine avec les fenêtres de vue est toujours visible. Objet Type Inscription Utilisation BreweryOverview Vue IHM - Vue d\u0027ensemble pour le contrôle-commande du processus de brassage sw_Content Fenêtre de vue - Vue pour l\u0027affichage des vues de conduite de processus sw_Header Fenêtre de vue - Vue pour l\u0027ouverture de la navigation entre les vues de la conduite de processus sw_Navigation Fenêtre de vue - Vue pour la navigation entre les vues de la conduite de processus btn_ShowNavigation Bouton Open Navigation Affiche la fenêtre de vue \" sw_Navigation\" btn_HideNavigation Bouton \u003c Masque la fenêtre de vue \" sw_Navigation\" btn_ProcessBrewery Bouton Brewery Passage à la vue du processus de brassage btn_ProcessValues Bouton Process Values Changement de vue les vers valeurs de processus du processus de brassage btn_Alarms Bouton Alarms Changement de vue vers les messages du processus de brassage btn_ProductCtrl Bouton Production Changement de vue vers la commande de la production Marche à suivre Ouvrez la vue IHM \" BreweryOverview\" et insérez une fenêtre de vue pour l\u0027affichage du  Headers. Définissez que la vue IHM \" Header\" est affichée dans la fenêtre de vue \"\". Configurez les paramètres de la fenêtre de vue : Configurez la fenêtre de vue de sorte qu\u0027elle s\u0027adapte à la taille de la vue IHM affichée. Définissez le nom de la fenêtre de vue. Sélectionnez la fenêtre de vue \" sw_Content\" : Copiez la fenêtre de vues \" sw_Header\". Renommez la fenêtre de vue copiée en \" sw_Content\". Définissez que la vue IHM \" BreweryProcess\" est affichée dans la fenêtre de vue \"\". Sélectionnez la fenêtre de vue \" sw_Navigation\" : Copiez la fenêtre de vues \" sw_Header\". Renommez la fenêtre de vue copiée en \" sw_Navigation\". Définissez que la vue IHM \" Navigation\" est affichée dans la fenêtre de vue \"\". Définissez que la fenêtre de vue \" sw_Navigation\" est toujours affichée au premier plan.  Positionnez les trois fenêtres de vue dans la vue IHM : Définissez la position de la fenêtre de vue \" sw_Header\". Définissez la position de la fenêtre de vue \" sw_Content\". Positionnez la fenêtre de vue \" sw_Navigation\" avec la souris sur les deux autres fenêtres de vue.';
g_sepIdx[g_sepIdx.length] = 'cac9fd19a67991f790f4611784b3f70d';
g_searchEnginePlainTextArray['cac9fd19a67991f790f4611784b3f70d'] = ' XML_NODE_NOTE Introduction Ci-après, vous configurez la vue IHM \" Header\" affichée dans la fenêtre de vue \" sw_Header\". Le bouton de la vue IHM \" Header\" vous permet d\u0027afficher la fenêtre de vue \" sw_Navigation\" dans laquelle l\u0027opérateur change la vue dans la fenêtre de vue \" sw_Content\".  Marche à suivre Ouvrez la vue IHM \" Header\" et insérez le bouton qui affiche la fenêtre de vue \" sw_Navigation\". Définissez l\u0027inscription du bouton. Ajoutez à l\u0027événement \" Click left mouse button\" une fonction système. Sélectionnez la fonction système permettant de définir la valeur de la propriété. Définissez les paramètres de la fonction système \" SetPropertyValue\". Majuscules et minuscules Respectez la casse lors de la définition des paramètres.';
g_sepIdx[g_sepIdx.length] = 'aa309aad67a9da81cdecf366c927702e';
g_searchEnginePlainTextArray['aa309aad67a9da81cdecf366c927702e'] = ' XML_NODE_NOTE Introduction Ci-après, vous configurez la vue IHM \" Navigation\" affichée dans la fenêtre de vue \" sw_Navigation\". Le bouton dans la vue IHM \" Navigation\" vous permet de changer la vue IHM affichée dans la fenêtre de vue \" sw_Content\".  La fenêtre de vue \" sw_Navigation\" est masquée par défaut et peut être affichée via le bouton \" Open Navigation\" dans le \" Header\" et peut être à nouveau masquée via le bouton \" \u003c\" dans la vue IHM \" Navigation\". Marche à suivre Ouvrez la vue IHM \" Navigation\" et insérez le bouton qui masque la fenêtre de vue \" sw_Navigation\". Ajoutez les autres boutons de la même façon. Configurez le bouton \" \u003c\" qui masque la fenêtre de vue \" sw_Navigation\". Ajoutez à l\u0027événement \" Click left mouse button\" une fonction système. Sélectionnez la fonction système \" SetPropertyValue\". Définissez les paramètres de la fonction système \" SetPropertyValue\". Majuscules et minuscules Respectez la casse lors de la définition des paramètres. Configurez le bouton \" Brewery\", qui affiche le processus de brassage dans la fenêtre de vue \" sw_Content\". Ajoutez un nouvel événement. Sélectionnez la fonction système \" ChangeScreen\". Définissez que la vue \" BreweryProcess\" est affichée dans la fenêtre de vue \" sw_Content\". Indiquez le chemin relatif \" ../sw_Content\" de la fenêtre de vue \" sw_Content\". Configurez le bouton \" Process Values\" de la même façon que le bouton \" Brewery\" et définissez les paramètres affichés pour l\u0027événement \" ChangeScreen\". Configurez le bouton \" Alarms\" de la même façon que le bouton \" Brewery\" et définissez les paramètres affichés pour l\u0027événement \" ChangeScreen\". Configurez le bouton \" Production\" de la même façon que le bouton \" Brewery\" et définissez les paramètres affichés pour l\u0027événement \" ChangeScreen\".';
g_sepIdx[g_sepIdx.length] = '46ff84349f6412511256f00d5e732175';
g_searchEnginePlainTextArray['46ff84349f6412511256f00d5e732175'] = 'Introduction Les collaborateurs du groupe d\u0027utilisateur \" Worker\" ne doivent pas avoir accès aux valeurs de processus. Afin de vous en assurer, vous configurez un accès protégé pour le bouton d\u0027appel des valeurs de processus. Marche à suivre Ouvrez la vue \" Navigation\". Sélectionnez le bouton \" Process Values\" et affectez-lui le droit d\u0027accès \" Operate\".';
g_sepIdx[g_sepIdx.length] = 'a0d605da5ff79793d83f8bec4a04bf1a';
g_searchEnginePlainTextArray['a0d605da5ff79793d83f8bec4a04bf1a'] = 'Principes de base L\u0027environnement pour le contrôle-commande du processus de brassage et désigné comme \" Runtime\". Le runtime s\u0027exécute indépendamment du pupitre opérateur dans le navigateur.  Dans la présente Mise en route, le runtime est exécuté depuis le PC sur lequel vous avez effectué la configuration. L\u0027utilisateur identifié dans Windows doit disposer de droits d\u0027administrateur locaux afin que le runtime puisse être démarré dans le navigateur. ';
g_sepIdx[g_sepIdx.length] = 'c3d0b8a9372564f12c7f12750941cda2';
g_searchEnginePlainTextArray['c3d0b8a9372564f12c7f12750941cda2'] = 'Introduction Des certificats sont utilisés pour connecter de façon sûre des terminaux avec WinCC Unified Runtime. Les certificats effectuent les tâches suivantes : Confirmer l\u0027identité des partenaires de communication Crypter l\u0027échange de données Principe de fonctionnement Avec WinCC Unified Configuration vous transférez les certificats sur les PC clients qui accèdent au runtime ①. Lorsque l\u0027utilisateur entre l\u0027URL du serveur runtime, l\u0027identité du client est vérifiée à l\u0027aide du certificat ②. Après la vérification, l\u0027utilisateur s\u0027authentifie avec son nom d\u0027utilisateur et son mot de passe ③. Le serveur et le client runtime communiquent de façon cryptée via le protocole HTTPS ④. Création de la structure de certificat WinCC Configuration Tool | FAQ';
g_sepIdx[g_sepIdx.length] = 'fa36066cf833ae63b732ebb4e0b42c6d';
g_searchEnginePlainTextArray['fa36066cf833ae63b732ebb4e0b42c6d'] = 'Démarrer la simulation Démarrez d\u0027abord la simulation pour l\u0027automate \"BreweryControl\" via le menu contextuel de ce dernier. L\u0027application \"PLCSim\" est automatiquement lancée une fois le chargement terminé.  Démarrez la simulation pour le pupitre opérateur.   Définissez que la gestion des utilisateurs locale est utilisée et confirmez le chargement des données de configuration sur le pupitre opérateur.  Ouvrez sur le PC de configuration le navigateur Chrome et démarrez le runtime.  Ouvrez une session runtime.  Utilisez dans ce cas l\u0027utilisateur \" masterbrewer\" que vous avez créé dans la gestion des utilisateurs locale. Tester la configuration Vérifiez que tous les changements de vue fonctionnent comme prévu. Naviguez vers la vue \"ProductControl\". Créez un jeu de paramètres pour la sorte de bière \"Pilsner\". Saisissez la quantité d\u0027ingrédients souhaitée et enregistrez le jeu de paramètres \"Pilsner\". Félicitations ! Vous avez créé votre premier projet WinCC Runtime Unified et l\u0027avez testé avec succès au runtime. ';
g_sepIdx[g_sepIdx.length] = '80cbf0d6d6fd203320d11073b18ece7d';
g_searchEnginePlainTextArray['80cbf0d6d6fd203320d11073b18ece7d'] = 'Description Runtime Collaboration désigne l\u0027échange de données entre plusieurs système Unified (pupitres et PC) lors de l\u0027exécution. Runtime Collaboration permet d\u0027afficher les vues de processus d\u0027autres stations dans une fenêtre de vue et d\u0027y effectuer des interventions. Cela permet d\u0027éviter tout travail de configuration en double. Pour pouvoir transmettre des données, il faut que les paramètres Collaboration soient définis dans tous les systèmes collaborant. Après la configuration, le pupitre est validé pour l\u0027accès. Dans le PC, l\u0027accès au pupitre est activé.';
g_sepIdx[g_sepIdx.length] = '6f2b807c25f30ecd3e844212fb396a95';
g_searchEnginePlainTextArray['6f2b807c25f30ecd3e844212fb396a95'] = 'Introduction Dans cette Mise en route, vous avez, pour des événements comme \" Activated\", configuré des fonctions qui déclenchent par exemple un changement de vue au runtime. Avec cette configuration, vous vous êtes familiarisé avec une partie du \"Scripting\". WinCC Runtime Unified dispose d\u0027un environnement de scripting moderne qui prend en charge JavaScript comme langage de programmation. Environnement de programmation L\u0027environnement de programmation s\u0027intègre dans l\u0027environnement de travail habituel et prend en charge des fonctions comme Syntax-Highlighting : JavaScript est basé sur un modèle d\u0027objet grâce auquel vous naviguez dans l\u0027éditeur avec IntelliSense : Des extraits de code simplifient la programmation en mettant à disposition des schémas d\u0027instructions fréquemment utilisés. Concepts Le scripting prend en charge des scripts globaux et locaux : Vous programmez les scripts globaux de façon centrale dans le projet. Vous appelez les scripts globaux p. ex. dans des scripts locaux, p. ex. pour la conversion d\u0027unités de mesure.   Vous programmez les scripts locaux à l\u0027emplacement d\u0027utilisation correspondant, p. ex. un changement de couleur pour un objet.  Pour les tâches de programmation souvent utilisées, vous utilisez des fonctions système prédéfinies, p. ex. pour modifier des valeurs ou quitter le mode runtime.  Exemples d\u0027utilisation typiques Dans cette Mise en route, vous avez utilisé les fonctions suivantes de JavaScript : Extraits de code Fonctions système D\u0027autres exemples d\u0027utilisation de JavaScript sont :  Lecture et écriture de variables Modification de propriétés d\u0027objet en fonction d\u0027autres propriétés ou valeurs Accès à l\u0027alarme Référence Pour plus d\u0027informations sur l\u0027utilisation de scripts, référez-vous à l\u0027ID de contribution 109758536 dans le portail SIOS.';
