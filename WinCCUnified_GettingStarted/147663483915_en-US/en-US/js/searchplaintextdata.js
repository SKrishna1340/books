var g_sepIdx = [];
//g_searchEnginePlainTextArray -> treeId | TopicText
var g_searchEnginePlainTextArray = [];
g_sepIdx[g_sepIdx.length] = '8c79bbffdf2b09435ebee508c938a28d';
g_searchEnginePlainTextArray['8c79bbffdf2b09435ebee508c938a28d'] = 'Welcome to the Getting Started for \"WinCC Runtime Unified\". Using the example of a medium-sized brewery, we will show you how you can use WinCC to take the first step in configuring the operator control and monitoring solution for managing the brewery process. Subject of the configuration The configuration covers the following process steps from the brewery process shown below: Mashing Lautering Spicing The brewery only processes raw materials from the region, which is why only one brewing kettle is used.  Configuration steps In the Getting Started, you will get to know the following configuration steps: Configuring the visualization of the brewing process Monitoring and logging the brewing process Configuring parameter sets (optional) Configuring user administration Configuring screen navigation Carrying out a function test in runtime Sample project If you simply want to view the configuration steps and results shown in this Getting Started, use the \" Brewery\" project. This project contains the complete, ready-to-run project in which all the configuration steps described in the Getting Started have already been completed. The project consists of a controller and an HMI. The HMI is connected to the controller via Ethernet. The brewing process is operated and monitored via the HMI. The controller processes the parameters according to its programming and sends measurement data from the sensors to the HMI for the display.  Sample project \"Brewery\" as download in the SIOS portal';
g_sepIdx[g_sepIdx.length] = 'a1c9a2cee6b96a87ae3027826f1db09a';
g_searchEnginePlainTextArray['a1c9a2cee6b96a87ae3027826f1db09a'] = 'Basics All the data for an HMI solution is stored with structure in a project:  One or more HMI devices including process communication and configuration data for each operator panel. ';
g_sepIdx[g_sepIdx.length] = 'efc52f589bd3bd70def195ee96a1b35c';
g_searchEnginePlainTextArray['efc52f589bd3bd70def195ee96a1b35c'] = 'Introduction  A project is to be created for the brewery sample project. Procedure Create a new project Switch to the project view Add a new device';
g_sepIdx[g_sepIdx.length] = '8d871b175e639ae5e580d5670a05b108';
g_searchEnginePlainTextArray['8d871b175e639ae5e580d5670a05b108'] = 'Basics WinCC works with two types of tags: External tags Internal tags The external tags form the link between WinCC and the automation systems. The values of external tags correspond to the process values from the memory of an automation system. Internal tags do not have a process link and only convey values within WinCC. ';
g_sepIdx[g_sepIdx.length] = 'aaddf3760e2b7bd5746fc38e6e2910b3';
g_searchEnginePlainTextArray['aaddf3760e2b7bd5746fc38e6e2910b3'] = 'Introduction During the brewing process, individual process variables such as the fill levels in the storage tanks, or the temperature in the mash tun, are to be monitored. A tag must be created for each of these variables. In the following, the tags shown in the table are to be created and organized in tag tables.  Name of the tag table Use filling_levels Fill level of tanks temperature Temperature of tanks pressure Pressure of tanks valve_status Valve status mash_tun Mash tun states Tag name Use Data type Tag table HMI_filling_level_water Fill level of water tank Int filling_levels HMI_filling_level_hop Fill level of hops tank Int filling_levels HMI_filling_level_malt Fill level of malt tank Int filling_levels HMI_valve_status_water Valve status of water tank open/closed Bool valve_status HMI_valve_status_hop Valve status of hops tank open/closed Bool valve_status HMI_valve_status_malt Valve status of malt tank open/closed Bool valve_status HMI_filling_level_mash_tun Fill level of mash tun Int mash_tun HMI_temperature_mash_tun Temperature of mash tun Int mash_tun HMI_mash_tun_heating Heater active/inactive Bool mash_tun HMI_pressure_water Pressure of water tank Int pressure HMI_pressure_hop Pressure of hops tank Int pressure HMI_pressure_malt Pressure of malt tank Int pressure HMI_temperature_water Temperature of water tank Int temperature HMI_temperature_hop Temperature of hops tank Int temperature HMI_temperature_malt Temperature of malt tank Int temperature Procedure Create a tag table and add a tag to it. Name the tag and choose the data type. Create the rest of the tags in the same way. Check your results by viewing all tags.';
g_sepIdx[g_sepIdx.length] = '394b6f060e73307cf9f6ef7a813c43df';
g_searchEnginePlainTextArray['394b6f060e73307cf9f6ef7a813c43df'] = 'Basics An HMI screen represents the user interface of an operator control and monitoring station. A system or a process is visualized with predefined screen objects in the HMI screen. The operator interacts with the process via the HMI screen. A screen consists of static and dynamic screen objects: Static screen objects do not depend on the process. Static screen objects include, for example, labels and diagrams. Dynamic screen objects change in line with the process. Dynamic screen objects typically visualize process values such as fill levels. The operator uses dynamic screen objects to intervene in the process.';
g_sepIdx[g_sepIdx.length] = '8899f3eb214829f70508723eac6eca10';
g_searchEnginePlainTextArray['8899f3eb214829f70508723eac6eca10'] = 'Introduction HMI screen name Screen type Use Size in pixels BreweryOverview Start screen Overview screen for operating and monitoring the brewing process 1440x900 BreweryProcess Process control Visualization of the brewing process 1440x800 Alarms Process control Overview of alarms from the process ProcessValues Process control Overview of logged process values ProductCtrl Process control Production control Header Navigation Screen for opening the navigation between process control screens 1440x100 Navigation Navigation Screen for navigating between process control screens 250x300 Procedure Create the HMI screen to visualize the start screen. Adjust the size of the HMI screen. Create the other HMI screens in the same way and specify the screen size shown in the table above.';
g_sepIdx[g_sepIdx.length] = 'f55011b52993d6f91ee99b291ed56236';
g_searchEnginePlainTextArray['f55011b52993d6f91ee99b291ed56236'] = 'Purpose You implement the screen navigation using the screen window technology. In an overview screen, you insert the following screen windows, which fulfill different tasks: Header A navigation window is shown above the header. Navigation The operator uses the buttons in the navigation window to change the content in the content window. The navigation window is hidden by default. Content Information on the system is displayed in the content window. For example, the level of the tanks or alarms in the system are displayed. You specify the content of the screen windows using HMI screens. In this section, you create all the HMI screens that you need to implement the screen navigation in this Getting Started. Template Suite Systems and machines are becoming more and more complex and the demands placed on the operator of a system are increasing. An intuitive and graphically appealing user interface as an interface between man and machine is therefore becoming increasingly important.  The  HMI Template Suite provides you with templates and ideas for configuring your HMI device in a clear and modern way. The layout and design are designed for smooth operability, clarity and expandability. In this way, you can simplify the operation of your machine and reduce operating errors.  In the following application example, you will learn how to work with the  HMI Template Suite: Application example \"Template Suite\"';
g_sepIdx[g_sepIdx.length] = '8ca8e8114998af0f5b4d378e701e8114';
g_searchEnginePlainTextArray['8ca8e8114998af0f5b4d378e701e8114'] = 'Basics Faceplates are user-defined groups of display and operating objects that are stored, managed and edited centrally in the project. All changes to the faceplate in the project can be changed centrally in the faceplate type. Ideally, you should use faceplates for plant objects or plant units that you use several times and that have identical data structures. In order to support central changeability, faceplates are based on a type-instance model: You create properties for faceplate instances centrally in the faceplate type. The instances represent local points of use of the faceplate type.';
g_sepIdx[g_sepIdx.length] = '8fd805f9f33db653a1628eb449c64ad3';
g_searchEnginePlainTextArray['8fd805f9f33db653a1628eb449c64ad3'] = 'Introduction The basic ingredients water, hops and malt are stored in three identical storage tanks. A valve on each storage tank controls the transport into the mash tun. Because the same display and control elements are used for all tanks, use the faceplate technology to implement the visualization. You define properties on a faceplate type that are parameterized for later use.  You need the following properties to configure the faceplate type: Property Use Data type filling_level Measured fill level in the tank Int valve_status Valve status Bool temperature Measured temperature in the tank Int pressure Measured pressure in the tank Int name Name of the ingredient WString Procedure Create a new faceplate type in the library. Configure the new faceplate type. Create the \" filling_level\" property for the faceplate type. Create the remaining properties listed in the table for the faceplate type. Insert a bar graph for the level. Create a new graphic type for visualizing the storage tank. Insert a tank as a standard graphic. You can find the tank in the toolbox under \" Graphics \u003e WinCC graphics folder \u003e Equipment \u003e Automation (EMF) \u003e Tanks\". Release the version of the graphic type. Insert the graphic type into the screen. Create a graphic type for the valve in the same way and insert it into the screen. You can find the valve in the toolbox under \" Graphics \u003e WinCC graphics folder \u003e Equipment \u003e Automation (EMF) \u003e Valves\". Link the property for displaying the fill level with the bar graph.   Insert a text field for the designation and a circle. The text field is not yet interconnected in this Getting Started.  Configure the circle so that its background color can be changed using a tag (1, 2). Finally, show the field for the parameter assignment of the tags (3).  Specify the valve status as a tag for the color and determine which color is applied for which state of the tag. Adjust the size of the faceplate. Then select with \u003cShift+Click\u003e the objects \"Tank\", \"Valve\" and \"Level indicator\" and set the transparency to \"100%\".  Share the faceplate type in the library.';
g_sepIdx[g_sepIdx.length] = 'e7365ad4057ef4c4de223645e95c2257';
g_searchEnginePlainTextArray['e7365ad4057ef4c4de223645e95c2257'] = 'Introduction The storage tanks for the beer ingredients should now be visualized on the basis of the created faceplate type. For each storage tank, insert an instance of the faceplate type and parameterize the properties with the corresponding tags. Procedure Open the HMI screen  \"BreweryProcess\" and use the faceplate type to create the instance for the storage tank that contains water.  Assign parameters for the \" pressure\" properties of the faceplate instance with the \" HMI_pressure_water\" tag. Assign parameters for the remaining properties of the faceplate instance in the same way. Visualize and assign parameters for the storage tank for \"Hops\" in the same way. Visualize and assign parameters for the storage tank for \"Malt\" in the same way.';
g_sepIdx[g_sepIdx.length] = '3ea41680b675ae9da1f17efb61c42e46';
g_searchEnginePlainTextArray['3ea41680b675ae9da1f17efb61c42e46'] = 'Introduction In the following, the already created process screen, which contains the three storage tanks for water, hops and malt, is to be expanded to include the remaining components of the brewing process. For this purpose, a mash tun is inserted and connected to the storage tanks via pipes. A heat source that heats the mash tun is inserted. In addition to the graphic elements, display elements for the process values of the mash tun are to be added. Procedure Insert the displayed tank, which represents the mash tun. Use pipe displays to complete the HMI screen. Insert the graphic of the displayed heat source. Insert a value display for the fill level tag  \"HMI_filling_level_mash_tun\" of the tank. When you drag a tag into the HMI screen, an I/O field is automatically created that is linked to this tag.  Insert a text field to label the tag.';
g_sepIdx[g_sepIdx.length] = '7bc36370ef37eac5758153071e39be2d';
g_searchEnginePlainTextArray['7bc36370ef37eac5758153071e39be2d'] = 'Introduction In the following, a pop-up window for faceplates is to be configured in which additional information on the fill level, temperature and pressure of the respective storage tank is displayed when you click on one of the three storage tanks. Procedure Duplicate the faceplate for the tank in the library. All interface tags of the \"Tank\" faceplate type are transferred to the new faceplate. Specify the properties of the new faceplate type. Open the new faceplate type for editing. Delete the graphic elements of the copied faceplate. Insert the text field for the fill level.  Insert the output field for the fill level. Connect the output field with the interface tag \" filling level\". Configure the text fields and output fields for temperature and pressure and connect the output fields with the interface tags \" temperature\" and \" pressure\". Adjust the size of the faceplate. Share the faceplate pop-up in the library. Open the faceplate type \" Tank\" in the library for editing. Create an event that is triggered by left-clicking on the tank. Insert the script template for opening a faceplate as a pop-up. Add the name of the newly created faceplate and a designation to the script. Share the faceplate type in the library and specify that the instances are updated in the project. Result The pop-up window for faceplates has been created and is displayed in Runtime when you click one of the storage tanks with the configured information.';
g_sepIdx[g_sepIdx.length] = 'f59f43027a6aab5a12ac5b902d23f36a';
g_searchEnginePlainTextArray['f59f43027a6aab5a12ac5b902d23f36a'] = 'Basics WinCC ensures that all events in the course of the process are recorded chronologically. Deviations from the process are visualized as alarms to the system operator. WinCC supports complete traceability when processing the cause of an error. An alarm contains the traceable status of the error processing with time stamp. An example of an alarm is when the level of a storage tank falls below the limit value. ';
g_sepIdx[g_sepIdx.length] = 'cd3582d3ca6c8abe4623f644dec94d31';
g_searchEnginePlainTextArray['cd3582d3ca6c8abe4623f644dec94d31'] = 'Introduction In the following, an alarm is to be configured that is triggered when the fill level in one of the storage tanks falls below a defined limit value. The following alarms are to be configured for the storage tanks of the ingredients. Name Alarm text Supervised tag Alarm class Limit alarm_level_water \" filling level water low\" HMI_filling_level_water  Alarm 50 l alarm_level_malt \" filling level malt low\" HMI_filling_level_malt Alarm 50 l alarm_level_hop \" filling level hop low\" HMI_filling_level_hop  Alarm 50 l Procedure Open the alarm overview. Create alarms for limit violations of the fill level. Create the remaining alarms in the same way.';
g_sepIdx[g_sepIdx.length] = '22bcc9724aa1443295a7442f4dcde0c4';
g_searchEnginePlainTextArray['22bcc9724aa1443295a7442f4dcde0c4'] = 'Basics Logging is a method for analyzing error states and for process documentation. By evaluating the logged data, you can derive measures to optimize maintenance cycles or increase product quality. In WinCC, during configuration, you select alarm classes and tags that are to be logged in the process mode. For later evaluation, select the time period from which you want to display alarms, for example. ';
g_sepIdx[g_sepIdx.length] = 'b47369b06eb865149e75019b40a518c6';
g_searchEnginePlainTextArray['b47369b06eb865149e75019b40a518c6'] = 'Introduction The previously configured level alarms with the alarm class \"Alarm\" should now be logged. An alarm log is created for the logging and then stored in the \"Alarm\" alarm class. All alarms of the alarm class are logged in this alarm log.   Procedure Create a new alarm log in which the alarms for limit value violations are to be logged. Store the alarm log with the alarm class.';
g_sepIdx[g_sepIdx.length] = '2cead40dbf5f5af592fa194f78249781';
g_searchEnginePlainTextArray['2cead40dbf5f5af592fa194f78249781'] = 'Introduction The process values of the fill levels in the storage tanks and in the mash tun should be logged. To do this, a logging tag must be created for each tag and then assigned to a data log. Logging tag name Logging of process values from tag Data type Data log log_water_level HMI_filling_level_water Int filling_levels log_hop_level HMI_filling_level_hop Int filling_levels log_malt_level HMI_filling_level_malt Int filling_levels log_mash_tun_level HMI_filling_level_mash_tun Int filling_levels log_status_water HMI_valve_status_water Bool valve_status log_status_hop HMI_valve_status_hop Bool valve_status log_status_malt HMI_valve_status_malt Bool valve_status Procedure Create a data log with the name  \"filling_levels\". Open the tag table \" filling_levels\" and create a logging tag for each of the tags mentioned above. Assign the logging tags to the data log \" filling_levels\". Open the tag table \" mash_tun\" and create a logging tag for the tag mentioned above. Assign the logging tags to the data log \" filling_levels\". Create a \" valve_status\" data log in the same way. Open the tag table \" valve_status\" and create a logging tag in the same way for each of the tags mentioned above. Assign the logging tags to the data log \" valve_status\".';
g_sepIdx[g_sepIdx.length] = '8494675ee2e1d7b7e6279abbc403ac6b';
g_searchEnginePlainTextArray['8494675ee2e1d7b7e6279abbc403ac6b'] = 'Visualization of alarms Recorded alarms can be shown in an alarm control in Runtime. In this way, you can see immediately whether there are problems or errors in the system. For example, it is indicated if the fill level of a storage tank falls below a limit value and has to be refilled. Visualization of process values Current process values can be shown in a trend control in Runtime. For example, you can display the fill level of the three storage tanks in a separate trend for each. As a result, you can always see the current fill level clearly and know when new supplies have to be ordered and refilled. You can also display the valve status in a trend control. In this way, you can see which valve is open and when.';
g_sepIdx[g_sepIdx.length] = '9ffd78adc609cc5c6cc662b0715d537f';
g_searchEnginePlainTextArray['9ffd78adc609cc5c6cc662b0715d537f'] = 'Introduction In the following, you will learn how to configure an alarm control to display the logged alarms. Requirement The alarm log is created. Procedure Open the \" Alarms\" screen and insert an alarm control. Configure the alarm control so that the logged alarms are displayed: Result The alarm control to display the logged alarms is configured.';
g_sepIdx[g_sepIdx.length] = 'd3eacd3df898313c4d84a9edf44059d4';
g_searchEnginePlainTextArray['d3eacd3df898313c4d84a9edf44059d4'] = 'Introduction The fill levels of the three tanks and the status of the three valves should be displayed as a trend on the HMI device. Requirement The fill levels of the 3 tanks are created as logged tags \" log_hop_level\", \" log_malt_level\" and \" log_water_level\". The status of the 3 valves are created as logged tags \" log_status_hop\", \" log_status_malt\" and \" log_status_water\". Procedure Open the \" ProcessValues\" screen and insert a trend view. Add two trend areas to the trend view. Configure the first trend view with the fill levels: Specify that the first trend is supplied from logged tags. Specify that the first trend is supplied with values from the logged tag \" log_hop_level\". Add two more trends to the first trend view. Specify that both trends are supplied with values from the logged tags \" log_malt_level\" and \" log_water_level\". Assign the desired line color to the first trend. Assign the desired line colors to the other two trends. Configure the second trend view with the valve status: Specify that the first trend is supplied from logged tags. Specify that the first trend is supplied with values from the logged tag \" log_status_hop\". Set the trend mode for the first trend \" Stepped\". Add two more trends to the second trend view. Specify that both trends are supplied with values from the logged tags \" log_status_malt\" and \" log_status_water\", and specify the trend mode \" Stepped\" for the two trends. Assign the desired line color to the first trend. Assign the desired line colors to the other two trends. Result The trend view for displaying the fill levels and the valve status is configured.';
g_sepIdx[g_sepIdx.length] = '43dd2ff4fe5d7e182a0debe8493ab64c';
g_searchEnginePlainTextArray['43dd2ff4fe5d7e182a0debe8493ab64c'] = 'Parameter set type The parameter set type specifies the parameters and their properties according to which a product is manufactured. A parameter set type is a template for different products with the same basic ingredients.  No specific parameter values are stored in the parameter set type. For this purpose, a parameter set is created based on the parameter set type for each product to be manufactured, for example, Hefeweizen or Pilsner. Parameter sets should be used when frequently changing between products with similar composition. In the process, you can quickly switch to another product. Basic changes to the structure are carried out centrally on the parameter set type. Parameter sets in the brewing process The brewmaster creates or imports one or more parameter sets. The shift manager selects the parameter set for the product to be manufactured. The parameter set is transferred from the HMI to the controller and the brewing process starts. The controller runs the user program and uses the parameter values of the basic ingredients for production. The individual ingredients are fed into the mash tun. The brewing process continues according to the user program.';
g_sepIdx[g_sepIdx.length] = '5288ba7ac44143b01ec97f440865792f';
g_searchEnginePlainTextArray['5288ba7ac44143b01ec97f440865792f'] = 'Introduction In the following, a parameter set type is to be configured. To do this you have to configure a controller. If you want to test your configuration afterwards, either load the project onto a real controller or use \" PLCSim\" to simulate a controller. Requirement Configuration requirement To configure a controller, you need a \" STEP 7\" license. Requirements for testing the configuration To test the configuration of the parameter sets with \" PLCSim\", you need an installed and configured version of \" PLCSim\". For information on the installation and configuration, refer to the \" PLCSim\" function manual. Procedure For communication between the HMI and the controller, perform the following steps on the controller: Add a controller with which the HMI can communicate. Create a user data type (UDT). Create a program block and store the UDT as data type. On the HMI side, connect the HMI to the controller and then configure the parameter set type. To do this, carry out the following steps: Link the connection of HMI and controller via an HMI tag with the program block. Create the parameter set type. Insert the parameter set control into the control panel of the HMI.';
g_sepIdx[g_sepIdx.length] = '8fc08deb70bbbab8290f53e71dd25302';
g_searchEnginePlainTextArray['8fc08deb70bbbab8290f53e71dd25302'] = 'Introduction To transfer parameter sets, first configure a controller and then the connection to the HMI. Procedure Add a new device. Select the \" 1518T-4 PN/DP\" controller and rename it to \" Brewery Control\". Switch to \"Devices \u0026 Networks\". Add the \" CP 1612 (A2)\" communication module to the HMI. Network the controller with the new HMI interface. Create the HMI connection between the HMI and controller.';
g_sepIdx[g_sepIdx.length] = '4a449ba928c003de1ae9c4c393e063ab';
g_searchEnginePlainTextArray['4a449ba928c003de1ae9c4c393e063ab'] = 'Introduction Here\u0027s how to create a user data type on the controller and add it to the project library. The user data type is later used as the basis for the parameter set type. The following elements should be created in the user data type: Element name Use Data type water Quantity of water Int hop Quantity of hops Int malt Quantity of malt Int Create user data type and add to the library Add a new data type. Rename the user data type in \" UDT_Beer\" and add the elements \" Water\", \" Hop\" and \" Malt\". Select the \" Int\" data type for all elements. Add the new user data type to the project library. Select the user data type in the library with \" UDT_Beer\".';
g_sepIdx[g_sepIdx.length] = '2a15dae3d779f47d2ad558ceeb130352';
g_searchEnginePlainTextArray['2a15dae3d779f47d2ad558ceeb130352'] = 'Introduction The values of the elements \" Water\", \" Hop\" and \" Malt\" are stored in the program block. In the following, you insert a data block and link it to the user data type \" UDT_Beer\". Procedure Add a new program block. Rename the new data block to \" DB_Brewery\". Create a new element \" Beer\" and use the user data type as data type. The parameters of the user data type are added automatically.';
g_sepIdx[g_sepIdx.length] = 'e83c375579719e119021ee3a6528f09a';
g_searchEnginePlainTextArray['e83c375579719e119021ee3a6528f09a'] = 'Introduction In the following, you configure the data exchange between controller and HMI device. Link HMI connection with program block Add a new tag table \" Recipe\" and create a parameter \" HMI_Beer\". Select the HMI connection. Select the PLC data type \" Beer\" previously created for the data block.';
g_sepIdx[g_sepIdx.length] = '00be830658fcb99f8091bd747221757c';
g_searchEnginePlainTextArray['00be830658fcb99f8091bd747221757c'] = 'Introduction In the following, you create a parameter set type for several beer types. The parameter set is to receive its structure through the parameter set type  \"PST_Beer\". The parameter set type consists of the elements  \"water\",  \"hop\" and  \"malt\". Element name Use Data type Unit of measurement water Quantity of water Int l hop Quantity of hops Int kg malt Quantity of malt Int kg Procedure Add a new parameter set type and rename it \" PST_Beer\". Select the user data type \" UDT_Beer\" as the data type. The structure is created automatically based on the user data type. Select the tag \" Beer\". Specify the units of measurement for the data types.';
g_sepIdx[g_sepIdx.length] = 'd0016df7e4c986f91a49b4cec65dc46c';
g_searchEnginePlainTextArray['d0016df7e4c986f91a49b4cec65dc46c'] = 'Introduction In the following you configure the parameter set control. The parameter sets are created and edited in runtime via the parameter set control. Procedure Insert the parameter set control in the HMI screen \" ProductCtrl\". Connect the parameter set type to the parameter set control.';
g_sepIdx[g_sepIdx.length] = '97da620fc784de1441258bf51cb013a7';
g_searchEnginePlainTextArray['97da620fc784de1441258bf51cb013a7'] = 'Introduction To establish the connection with PLCSim, define the access rights for the PLC before setting up the connection. When you start the simulation, the PLCSim control window opens. You can control the simulation using the Run and Stop buttons. If you follow the explained procedure, no operation of the control window is required.  During the procedure, deactivate functions for the protection of confidential data and restrictions on operation.  These functions are deactivated to simplify the simulation. In the real process environment, this access must be restricted. With automation systems, the unconditional maintenance of operational safety and the protection of life and limb are paramount. The decisive requirement for this is maintaining the availability of the system and thus unrestricted control over the process. Procedure Open the properties of the \"Brewery Control\" controller. Deactivate the function for protecting confidential PLC configuration data and select the \"Full access\" access level for the controller. Start the simulation. Select your target device. Check the settings and load the data. Complete the loading process. Establish an \"online connection\". Result The connection has been established successfully.';
g_sepIdx[g_sepIdx.length] = 'f5ad851385b46bf71b35d072364fd27d';
g_searchEnginePlainTextArray['f5ad851385b46bf71b35d072364fd27d'] = 'Basics WinCC allows you to restrict security-relevant operations to specific user groups and thereby protect Runtime data and functions against unauthorized access. Set up users and assign authorizations to these users. Configure the authorizations required for operation of safety-related objects. In Runtime, users must log on with their user name and password. The requested action is executed provided the user has the required authorization. When a user is assigned a role, she/he is given the rights associated with it. Roles with associated rights may look like the following for a brewing process: Brewmaster Shift manager Operator May monitor the process x x x May operate the process x x May edit the recipes x User management is either global or local. Global and local user management Local user management is performed in the project. The users are created by the engineer and exist only in this project. The engineer defines the rights of the individual roles and assigns users their roles. If a new user is to be added or removed subsequently, the project must be changed. Local user management is useful when only one project is created and managed. For example, a single brewery. In global user management, users are decoupled from the role in the project. Users are managed centrally on an external server. Users are created on the external server and organized into groups that correspond to their subsequent use. The engineer does not create users in the project. The engineer imports the groups from the external server and assigns the corresponding roles to the groups. To add users later, they are created on the external server and assigned to an existing group. This automatically gives them the role assigned to the group in the respective project. No change to the project is required.  The global user management is particularly suitable if multiple projects are to be maintained centrally. This is the case for example, when several different breweries are managed by the same company, or when new employees are added frequently.';
g_sepIdx[g_sepIdx.length] = '54ef26d7006ca83ea81a2eaac10b5820';
g_searchEnginePlainTextArray['54ef26d7006ca83ea81a2eaac10b5820'] = ' XML_NODE_NOTE Introduction In the following, you will learn how to create a local user management. Creating local users Create a new local user. Name the new local user and define a password. User names may not contain white spaces Create two more users and define a password for each user. Assign the role \" masterbrewer\" to the user \" HMI Administrator\". Assign the role \" shiftsupervisor\" to the user \" HMI Operator\". Assign the role \" worker\" to the user \" HMI Monitor\". Display and check the rights of a user. If necessary, you can also define your own user roles.';
g_sepIdx[g_sepIdx.length] = '5e0bc357d8fffe5020f08d5a266872a7';
g_searchEnginePlainTextArray['5e0bc357d8fffe5020f08d5a266872a7'] = 'Basics Process visualization is generally split between multiple screens, for example on the basis of functional or technological aspects. Changing between screens is referred to as screen navigation.';
g_sepIdx[g_sepIdx.length] = 'fa162268dd280668d5335ba55cb814e2';
g_searchEnginePlainTextArray['fa162268dd280668d5335ba55cb814e2'] = 'Basics You use the screen window technology to implement the screen navigation. You divide the overview screen into three areas using screen windows and determine which HMI screens are displayed in the respective screen window. Information on the system is displayed in the screen window \" sw_Content\", for example the brewing process, alarms or process values. The HMI screens that are used for navigation are displayed in the \" sw_Header\" and \" sw_Navigation\" screen windows. Use the \" Open Navigation\" button in the HMI screen \" Header\" to show the HMI screen \" Navigation\". Using the buttons in the HMI screen \" Navigation\", the operator changes the screens in the screen window \" sw_Content\" in Runtime. Configuration In this section, you will learn the following: Inserting and configuring screen windows Configuring buttons for showing and hiding screen windows using the system function \" SetPropertyValue\" Configuring buttons for changing the content of a screen window using the system function \" ChangeScreen\"';
g_sepIdx[g_sepIdx.length] = '445628e991dc3b999f1629c5ed54608c';
g_searchEnginePlainTextArray['445628e991dc3b999f1629c5ed54608c'] = 'Introduction You implement the screen navigation using the \"screen window technology\". With the screen window technology, you implement picture-in-picture view: The screen changes are executed in the screen window. The root screen with the screen windows is always visible. Object Type Label Use BreweryOverview HMI screen - Overview screen for operating and monitoring the brewing process sw_Content Screen window - Screen for displaying the screens for process control sw_Header Screen window - Screen for opening the navigation between process control screens sw_Navigation Screen window - Screen for navigating between process control screens btn_ShowNavigation Button Open Navigation Shows the screen window \" sw_Navigation\" btn_HideNavigation Button \u003c Hides the screen window \" sw_Navigation\" btn_ProcessBrewery Button Brewery Screen change for the brewing process btn_ProcessValues Button Process Values Screen change for process values from the brewing process btn_Alarms Button Alarms Screen change for alarms from the brewing process btn_ProductCtrl Button Production Screen change for production control Procedure Open the HMI screen \" BreweryOverview\" and insert a screen window to display the  Headers. Specify that the HMI screen \" Header\" is displayed in the screen window. Configure the window settings for the screen window. Configure the screen window so that it adapts to the size of the displayed HMI picture. Specify the name of the screen window. Configure the screen window \" sw_Content\": Copy the screen window \" sw_Header\". Rename the copied screen window to \" sw_Content\". Specify that the HMI screen \" BreweryProcess\" is displayed in the screen window. Configure the screen window \" sw_Navigation\": Copy the screen window \" sw_Header\". Rename the copied screen window to \" sw_Navigation\". Specify that the HMI screen \" Navigation\" is displayed in the screen window. Specify that the screen window \" sw_Navigation\" is always displayed in the foreground.  Position the three screen windows in the HMI screen: Specify the position for the screen window \" sw_Header\". Specify the position for the screen window \" sw_Content\". Using the mouse, position the screen window \" sw_Navigation\" over the other two screen windows.';
g_sepIdx[g_sepIdx.length] = 'cac9fd19a67991f790f4611784b3f70d';
g_searchEnginePlainTextArray['cac9fd19a67991f790f4611784b3f70d'] = ' XML_NODE_NOTE Introduction In the following, you configure the HMI screen \" Header\" which is displayed in the screen window \" sw_Header\". Use the button in the HMI screen \" Header\" to show the screen window \" sw_Navigation\" in which the operator changes the screen in the screen window \" sw_Content\".  Procedure Open the HMI screen \" Header\" and insert the button that shows the screen window \" sw_Navigation\". Define the label for the button. Add a system function to the event \" Click left mouse button\". Select the system function for setting the property value. Specify the parameters of the system function \" SetPropertyValue\". Upper and lower case Pay attention to the correct case when setting the parameters.';
g_sepIdx[g_sepIdx.length] = 'aa309aad67a9da81cdecf366c927702e';
g_searchEnginePlainTextArray['aa309aad67a9da81cdecf366c927702e'] = ' XML_NODE_NOTE Introduction In the following, you configure the HMI screen \" Navigation\" which is displayed in the screen window \" sw_Navigation\". Use the buttons in the HMI screen \" Navigation\" to change the displayed HMI screen in the screen window \" sw_Content\".  The screen window \" sw_Navigation\" is hidden by default and can be shown using the \" Open Navigation\" button in the \" Header\" and hidden again using the \" \u003c\" button in the HMI screen \" Navigation\". Procedure Open the HMI screen \" Navigation\" and insert the button that hides the screen window \" sw_Navigation\". Insert the other buttons in the same way. Configure the button \" \u003c\" that hides the screen window \" sw_Navigation\". Add a system function to the event \" Click left mouse button\". Select the system function \" SetPropertyValue\". Specify the parameters of the system function \" SetPropertyValue\". Upper and lower case Pay attention to the correct case when setting the parameters. Configure the button \" Brewery\" which shows the brewing process in the screen window \" sw_Content\". Insert a new event. Select the system function \" ChangeScreen\". Specify that the screen \" BreweryProcess\" is displayed in the screen window \" sw_Content\". Enter the relative path \" ../sw_Content\" of the screen window \" sw_Content\". Configure the button \" Process Values\" in the same way as the button \" Brewery\" and specify the displayed parameters for the event \" ChangeScreen\". Configure the button \" Alarms\" in the same way as the button \" Brewery\" and specify the displayed parameters for the event \" ChangeScreen\". Configure the button \" Production\" in the same way as the button \" Brewery\" and specify the displayed parameters for the event \" ChangeScreen\".';
g_sepIdx[g_sepIdx.length] = '46ff84349f6412511256f00d5e732175';
g_searchEnginePlainTextArray['46ff84349f6412511256f00d5e732175'] = 'Introduction Employees of the user group \" Worker\" should not access the process values. To ensure this, configure an appropriate access protection for the button for calling the process values. Procedure Open the \" Navigation\" screen. Select the \" Process Values\" button and assign the \" Operate\" access right to the button.';
g_sepIdx[g_sepIdx.length] = 'a0d605da5ff79793d83f8bec4a04bf1a';
g_searchEnginePlainTextArray['a0d605da5ff79793d83f8bec4a04bf1a'] = 'Basics The environment for operating and monitoring the brewing process is called \" Runtime\". Runtime runs in the browser independently of the HMI device.  In this Getting Started, Runtime is run on the PC on which you configured it. For runtime to be started in the browser, the user logged on to Windows must have local admin rights. ';
g_sepIdx[g_sepIdx.length] = 'c3d0b8a9372564f12c7f12750941cda2';
g_searchEnginePlainTextArray['c3d0b8a9372564f12c7f12750941cda2'] = 'Introduction Certificates are used to securely connect end devices to WinCC Unified Runtime. Certificates fulfill the following tasks: Confirm the identity of the communication partner Encrypt data exchange Operating principle With the WinCC Unified Configuration, you can transfer the certificate to the client PCs that access Runtime ①. When the operator enters the URL of the Runtime server, the identity of the client is checked using the certificate ②. After the check, the operator authenticates himself or herself with a user name and password ③. The Runtime server and client communicate encrypted using the HTTPS protocol ④. Setting up the certificate structure WinCC Configuration Tool | FAQ';
g_sepIdx[g_sepIdx.length] = 'fa36066cf833ae63b732ebb4e0b42c6d';
g_searchEnginePlainTextArray['fa36066cf833ae63b732ebb4e0b42c6d'] = 'Starting the simulation First, start the simulation for the \"BreweryControl\" via the shortcut menu of the control. The \"PLCSim\" application is started automatically once the load process is complete.  Start the simulation for the HMI device.   Specify that the local user management is used and confirm the download of the configuration data to the HMI device.  Open the Chrome browser on the configuration computer and start Runtime.  Log on in Runtime.  In this case, use the user \" masterbrewer\" which you created in the local user management. Testing the configuration Check that all screen changes are working as intended. Navigate to the \"ProductControl\" screen. Create a parameter set for the \"Pilsner\" beer type. Enter the desired quantities of ingredients and save the \"Pilsner\" parameter set. Congratulations! You have created your first project with WinCC Runtime Unified and successfully tested it in Runtime. ';
g_sepIdx[g_sepIdx.length] = '80cbf0d6d6fd203320d11073b18ece7d';
g_searchEnginePlainTextArray['80cbf0d6d6fd203320d11073b18ece7d'] = 'Description Runtime Collaboration refers to the exchange of data between several Unified Systems (Panels and PCs) during runtime. Runtime Collaboration allows process pictures of other stations to be displayed and operated in a screen window. Thus, no double configuration effort is required. To be able to transfer data, the collaboration settings must be specified in all collaborating systems. After the configuration, the Panel is shared for access. Access to the Panel is activated in the PC.';
g_sepIdx[g_sepIdx.length] = '6f2b807c25f30ecd3e844212fb396a95';
g_searchEnginePlainTextArray['6f2b807c25f30ecd3e844212fb396a95'] = 'Introduction In this Getting Started, you have configured functions at events such as \" Activated\" which, for example, trigger a screen change in Runtime. With this configuration, you have got to know a small part of the \"scripting\". WinCC Runtime Unified has a modern script environment that supports JavaScript as the programming language. Programming environment The programming environment is integrated into the familiar working environment and supports functions such as syntax highlighting: JavaScript is based on an object model that you navigate through in the editor with IntelliSense: Code snippets make programming easier by providing frequently used instruction patterns: Concepts Scripting supports global and local scripts: You program global scripts centrally in the project. For example, you can call global scripts in local scripts, such as for unit of measure conversions.   You program local scripts at the respective point of use, e.g. color change at an object.  You can use predefined system functions for frequently required programming tasks, for example to change values or to exit Runtime.  Typical application examples In this Getting Started, you have used the following JavaScript functions: Code Snippets System functions Other typical application examples of JavaScript are:  Reading and writing of tags Changing object properties depending on other properties or values Access to alarms Reference You can find more information on the use of scripting in the SIOS Portal under entry ID 109758536.';
