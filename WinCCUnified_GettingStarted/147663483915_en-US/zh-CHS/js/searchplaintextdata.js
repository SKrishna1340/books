var g_sepIdx = [];
//g_searchEnginePlainTextArray -> treeId | TopicText
var g_searchEnginePlainTextArray = [];
g_sepIdx[g_sepIdx.length] = '8c79bbffdf2b09435ebee508c938a28d';
g_searchEnginePlainTextArray['8c79bbffdf2b09435ebee508c938a28d'] = '欢迎使用“WinCC Runtime Unified”入门指南。我们将以中型啤酒厂为例，显示如何开始用 WinCC 进行初步的组态工作，即如何组态用于管理啤酒厂过程的操作员控制和监控解决方案。 组态主题 组态包含酿酒过程（见下图）的以下过程步骤： 糖化 过滤 加香料 啤酒厂仅加工本地区的原材料，因此仅使用一个酿造锅。  组态步骤 在“入门指南”中，您将了解以下组态步骤： 组态酿酒过程的可视化 监视和记录酿酒过程 组态参数组（可选） 组态用户管理 组态画面导航 在运行系统中执行功能测试 示例项目 如果只是要查看本“入门指南”中介绍的组态步骤和结果，请使用“ Brewery”项目。此项目是一个完整的可直接运行的项目，其中已完成“入门指南”中所述的所有组态步骤。 项目由控制器和 HMI 组成。HMI 通过以太网连接到控制器。通过 HMI 操作和监视酿酒过程。控制器根据其程序设定处理参数，并将测量数据从传感器发送至 HMI 进行显示。  从 SIOS 门户中下载的样本项目“Brewery”';
g_sepIdx[g_sepIdx.length] = 'a1c9a2cee6b96a87ae3027826f1db09a';
g_searchEnginePlainTextArray['a1c9a2cee6b96a87ae3027826f1db09a'] = '基本知识 一个 HMI 解决方案的所有数据都按结构存储在一个项目中：一台或多台 HMI 设备，包含每个操作员面板的过程通信和组态数据。 ';
g_sepIdx[g_sepIdx.length] = 'efc52f589bd3bd70def195ee96a1b35c';
g_searchEnginePlainTextArray['efc52f589bd3bd70def195ee96a1b35c'] = '简介  将为啤酒厂示例项目创建一个项目。 步骤 新建项目 切换到项目视图 添加一个新设备';
g_sepIdx[g_sepIdx.length] = '8d871b175e639ae5e580d5670a05b108';
g_searchEnginePlainTextArray['8d871b175e639ae5e580d5670a05b108'] = '基本知识 WinCC 使用两种类型的变量： 外部变量 内部变量 外部变量将链接 WinCC 和自动化系统。外部变量值与自动化系统存储器中的过程值相对应。 内部变量没有过程链接，只能在 WinCC 内部传送值。 ';
g_sepIdx[g_sepIdx.length] = 'aaddf3760e2b7bd5746fc38e6e2910b3';
g_searchEnginePlainTextArray['aaddf3760e2b7bd5746fc38e6e2910b3'] = '简介 在酿酒过程中，单独过程变量将接受监视，例如储罐中的填充料位或糖化桶中的温度。对于这些变量中的每一个，都必须在系统中创建一个变量。在下文中，表格所示的变量都应在变量表格中加以创建和组织。  变量表的名称 用途 filling_levels 储罐填充料位 temperature 储罐温度 pressure 储罐压力 valve_status 阀门状态 mash_tun 糖化桶状态 变量名称 用途 数据类型 变量表 HMI_filling_level_water 水储罐的填充料位 Int filling_levels HMI_filling_level_hop 啤酒花储罐料位 Int filling_levels HMI_filling_level_malt 麦芽储罐料位 Int filling_levels HMI_valve_status_water 水储罐打开/关闭的阀门状态 Bool valve_status HMI_valve_status_hop 啤酒花储罐打开/关闭的阀门状态 Bool valve_status HMI_valve_status_malt 麦芽储罐打开/关闭的阀门状态 Bool valve_status HMI_filling_level_mash_tun 糖化桶料位 Int mash_tun HMI_temperature_mash_tun 糖化桶温度 Int mash_tun HMI_mash_tun_heating 加热器激活/未激活 Bool mash_tun HMI_pressure_water 水储罐压力 Int pressure HMI_pressure_hop 啤酒花储罐压力 Int pressure HMI_pressure_malt 麦芽储罐压力 Int pressure HMI_temperature_water 水储罐温度 Int temperature HMI_temperature_hop 啤酒花储罐温度 Int temperature HMI_temperature_malt 麦芽储罐温度 Int temperature 步骤 创建一个变量表并向其中添加一个变量。 为此变量命名并选择数据类型。 以相同方式创建剩余变量。 通过查看所有变量来检查结果。';
g_sepIdx[g_sepIdx.length] = '394b6f060e73307cf9f6ef7a813c43df';
g_searchEnginePlainTextArray['394b6f060e73307cf9f6ef7a813c43df'] = '基本知识 HMI 画面代表的是操作员控制和监视站的用户界面。系统或过程通过 HMI 画面中的预定义画面对象进行可视化。操作员通过 HMI 画面与过程进行交互。 一个画面包含静态和动态两种画面对象： 静态画面对象不依赖于过程。静态画面对象包括标签和图等内容。 动态画面对象会随着过程进行变化。动态画面对象通常用来对填充料位等过程值进行可视化。操作员使用动态画面对象来干预过程。';
g_sepIdx[g_sepIdx.length] = '8899f3eb214829f70508723eac6eca10';
g_searchEnginePlainTextArray['8899f3eb214829f70508723eac6eca10'] = '简介 HMI 画面名称 画面类型 用途 大小，单位为像素 BreweryOverview 启动画面 用于操作和监视酿酒过程的总览画面 1440x900 BreweryProcess 过程控制 酿酒过程可视化 1440x800 Alarms 过程控制 过程报警概览 ProcessValues 过程控制 已记录过程值概览 ProductCtrl 过程控制 生产控制 Header 导航 用于打开过程控制画面间导航的画面 1440x100 Navigation 导航 用于在过程控制画面之间导航的画面 250x300 步骤 创建用于可视化启动画面的 HMI 画面。 调整 HMI 画面的大小。 按照同样的方式创建其他 HMI 画面并指定上表中所显示的画面大小。';
g_sepIdx[g_sepIdx.length] = 'f55011b52993d6f91ee99b291ed56236';
g_searchEnginePlainTextArray['f55011b52993d6f91ee99b291ed56236'] = '目的 画面导航通过画面窗口工艺执行。在概览画面中，插入分别面向不同任务的以下画面窗口： 标题 导航窗口在标题上方显示。 导航 操作员通过导航窗口中的按钮更改内容窗口中的内容。 导航窗口默认隐藏。 内容 有关系统的信息显示在内容窗口中。例如，系统中报警或储罐的料位都将加以显示。 画面窗口的内容通过 HMI 画面指定。在此部分中，我们将创建在执行本“入门指南”画面导航时所需的所有 HMI 画面。 模板套件 系统和机器正变得越来越复杂，对系统操作员的要求也逐渐提高。因此在人和机器之间使用一个直观且富有吸引力的图形化用户界面变得愈发重要。 HMI Template Suite 提供了模板和理念，支持以一种清晰且现代的方式进行 HMI 设备组态。 布局和设计旨在支持顺畅操作、清晰明确以及轻松扩展。借此方式，可以简化机器的操作并减少操作错误。  在以下应用实例中，您将了解到如何使用  HMI Template Suite： 应用示例“Template Suite”';
g_sepIdx[g_sepIdx.length] = '8ca8e8114998af0f5b4d378e701e8114';
g_searchEnginePlainTextArray['8ca8e8114998af0f5b4d378e701e8114'] = '基本知识 面板是用户自定义的显示和操作对象组，可在项目中对这些对象集中进行存储、管理和编辑。在项目中对面板所做的全部更改可在面板类型中集中进行更改。理想情况下，应为多次使用以及具有相同数据结构的工厂对象或设备使用面板。 为支持集中更改功能，面板基于类型-实例模型： 在面板类型中集中创建面板实例的属性。 实例代表面板类型的局部应用点。';
g_sepIdx[g_sepIdx.length] = '8fd805f9f33db653a1628eb449c64ad3';
g_searchEnginePlainTextArray['8fd805f9f33db653a1628eb449c64ad3'] = '简介 水、啤酒花和麦芽三种基本原料分别存储在三个完全相同的储罐中。每个储罐上都有一个阀门控制着指向糖化桶的输送通路。由于所有储罐都使用相同的画面和控制元素，因此可视化通过面板工艺执行。在面板类型中定义属性，并且进行此等参数设置后可供日后使用。  为组态面板类型，需要以下属性： 属性 用途 数据类型 filling_level 储罐中测得的填充料位 Int valve_status 阀门状态 Bool temperature 储罐中测得的温度 Int pressure 储罐中测得的压力 Int name 成分名称 WString 步骤 在库中创建新的面板类型。 创建新面板类型。 为面板类型创建“ filling_level”属性。 为面板类型创建表格中所列的剩余属性。 插入表示料位的条形图。 创建新的图形类型，以显示储罐。 插入储罐作为标准图形。储罐位于工具箱中的“ Graphics \u003e WinCC graphics folder \u003e Equipment \u003e Automation (EMF) \u003e Tanks”下。 发布图形类型的版本。 将图形类型插入画面中。 通过同样的方式为阀门创建一个图形类型，并将其插入画面中。阀门位于工具箱中的“ Graphics \u003e WinCC graphics folder \u003e Equipment \u003e Automation (EMF) \u003e Valves”下。 将填充料位的显示属性与条形图关联起来。 插入一个用于命名的文本字段以及一个圆圈。此文本字段在本“入门指南”中尚未建立互联。  组态圆圈，令其背景颜色能够通过变量更改 (1, 2)。最后，显示变量参数分配字段 (3)。  将阀门状态指定为颜色变量，并确定哪种颜色适用于哪种变量状态。 调整面板的大小。 然后通过 \u003cShift+单击\u003e 选中对象“储罐”、“阀门”和“料位指示器”，并将透明度设为“100%”。  在库中共享面板类型。';
g_sepIdx[g_sepIdx.length] = 'e7365ad4057ef4c4de223645e95c2257';
g_searchEnginePlainTextArray['e7365ad4057ef4c4de223645e95c2257'] = '简介 至此，应在已创建的面板类型的基础上，对各个啤酒原料储罐进行可视化。对于每个储罐，插入一个面板类型实例，并对相应变量的属性进行参数设置。 步骤 打开 HMI 画面  \"BreweryProcess\" 并利用面板类型来创建盛水储罐实例。  通过“ HMI_pressure_water”变量为面板实例的“ pressure”属性分配参数。 以相同的方式为面板实例的剩余属性分配参数。 以相同的方式为“啤酒花”储罐可视化和分配参数。 以相同的方式为“麦芽”储罐可视化和分配参数。';
g_sepIdx[g_sepIdx.length] = '3ea41680b675ae9da1f17efb61c42e46';
g_searchEnginePlainTextArray['3ea41680b675ae9da1f17efb61c42e46'] = '简介 在下文中，已创建的包含水、啤酒花和麦芽这三个储罐的过程画面将得到扩展，加入酿酒过程的其余组件。就此目的，插入一个糖化桶并用管道连接到各个储罐。插入一个用于加热糖化桶的热源。除了图形元素外，糖化桶过程值的显示元素也应予以添加。 步骤 插入显示的储罐，以此代表糖化桶。 使用管道图形来完成 HMI 画面。 插入所示的热源图形。 为储罐的填充料位变量  \"HMI_filling_level_mash_tun\" 插入一个值显示。在将变量拖入 HMI 画面后，将自动创建一个与此变量相链接的 I/O 字段。  插入一个文本字段来标记此变量。';
g_sepIdx[g_sepIdx.length] = '7bc36370ef37eac5758153071e39be2d';
g_searchEnginePlainTextArray['7bc36370ef37eac5758153071e39be2d'] = '简介 下文中将创建面板的一个弹出窗口，借此，在单击三个储罐其中的一个时，将显示对应储罐的填充料位、温度和压力这些附加信息。 步骤 在库中复制储罐的面板。“储罐”面板类型的所有接口变量都将传送到新面板中。 指定新面板类型的属性。 打开新面板类型进行编辑。 删除复制面板的图形元素。 插入填充物位文本字段。  插入填充物位输出字段。 将输出字段连接到接口变量“ filling level”。 组态温度和压力的文本字段和输出字段，并将输出字段与接口变量“ temperature”连接到“ pressure”。 调整面板的大小。 在库中共享面板弹出画面。 在库中打开面板类型“ Tank”进行编辑。 创建一个将在左键单击储罐时触发的事件。 插入可将面板作为弹出窗口打开的脚本模板。 为新创建的面板添加名称，并为脚本添加标识。 在库中共享面板类型，并指定将在项目中更新实例。 结果 面板的弹出窗口已创建，并会在运行过程中单击其中一个储罐时，连同组态的信息一起显示。';
g_sepIdx[g_sepIdx.length] = 'f59f43027a6aab5a12ac5b902d23f36a';
g_searchEnginePlainTextArray['f59f43027a6aab5a12ac5b902d23f36a'] = '基本知识 WinCC 将确保过程进行中的所有事件都按时间顺序记录。过程的偏离以报警的形式可视化给系统操作员。WinCC 支持完全的可追溯能力，可帮助处理故障的根源。 报警包含可追溯的故障处理状态及时间戳。报警的一个示例就是，储罐料位下降到限值以下。 ';
g_sepIdx[g_sepIdx.length] = 'cd3582d3ca6c8abe4623f644dec94d31';
g_searchEnginePlainTextArray['cd3582d3ca6c8abe4623f644dec94d31'] = '简介 在下文中报警将组态为，在其中一个储罐的料位下降到定义的限值以下时触发报警。 具体上应为各原料储罐组态以下报警。 名称 报警文本 监控的变量 报警类别 限值 alarm_level_water \" filling level water low\" HMI_filling_level_water  报警 50 l alarm_level_malt \" filling level malt low\" HMI_filling_level_malt 报警 50 l alarm_level_hop \" filling level hop low\" HMI_filling_level_hop  报警 50 l 步骤 打开报警总览。 创建填充料位限值超出报警。以同样方式创建其余报警。';
g_sepIdx[g_sepIdx.length] = '22bcc9724aa1443295a7442f4dcde0c4';
g_searchEnginePlainTextArray['22bcc9724aa1443295a7442f4dcde0c4'] = '基本知识 记录是分析故障状态和进行过程记录的一种方法。通过评估记录的数据，可以得出优化维护间隔期或提高产品质量的方法。 在 WinCC 中，在组态时，选择要在过程模式中记录的报警类别和变量。对于后续的评估，举例来说，可选择要显示报警的时间段起点。 ';
g_sepIdx[g_sepIdx.length] = 'b47369b06eb865149e75019b40a518c6';
g_searchEnginePlainTextArray['b47369b06eb865149e75019b40a518c6'] = '简介 至此，应记录之前组态的报警类别为“报警”的料位报警。为进行记录，创建一个报警日志，然后将其存储到“报警”报警类别中。所有此报警类别下的报警都记录到这一报警日志内。   步骤 创建一个新的报警日志，借此记录所有违反此报警限制的报警。 存储报警日志及报警级别。';
g_sepIdx[g_sepIdx.length] = '2cead40dbf5f5af592fa194f78249781';
g_searchEnginePlainTextArray['2cead40dbf5f5af592fa194f78249781'] = '简介 糖化桶和储罐中填充料位的过程值应加以记录。为此，必须为每个变量创建一个记录变量，然后将后者分配到一个数据日志。 记录变量名称 来自变量的过程值记录 数据类型 数据日志 log_water_level HMI_filling_level_water Int filling_levels log_hop_level HMI_filling_level_hop Int filling_levels log_malt_level HMI_filling_level_malt Int filling_levels log_mash_tun_level HMI_filling_level_mash_tun Int filling_levels log_status_water HMI_valve_status_water Bool valve_status log_status_hop HMI_valve_status_hop Bool valve_status log_status_malt HMI_valve_status_malt Bool valve_status 步骤 以  \"filling_levels\"为名称创建一个数据日志。 打开变量表“ filling_levels”并为每个上述变量创建记录变量。将这些记录变量分配到数据日志“ filling_levels”。 打开变量表“ mash_tun”并为上述变量创建记录变量。将这些记录变量分配到数据日志“ filling_levels”。 以同样的方式创建“ valve_status”数据日志。 打开变量表“ valve_status”并以相同的方式为每个上述变量创建记录变量。将这些记录变量分配到数据日志“ valve_status”。';
g_sepIdx[g_sepIdx.length] = '8494675ee2e1d7b7e6279abbc403ac6b';
g_searchEnginePlainTextArray['8494675ee2e1d7b7e6279abbc403ac6b'] = '报警的可视化 记录的报警可在运行时显示在报警控件之中。凭借这种方式，可直接查看系统中是否存在问题或故障。例如，可指示储罐的填充料位是否降低到限值以下并必须进行再次填充。 过程值的可视化 当前过程值可在运行时显示于趋势控件内。例如，可分别显示三个储罐的填充料位，每个对应一个单独的趋势。作为结果，可始终明确当前的填充料位，并了解应何时订购和补充物料。另外还可在趋势控件中显示阀门状态。通过这种方式，可查看哪个阀门已打开以及何时打开。';
g_sepIdx[g_sepIdx.length] = '9ffd78adc609cc5c6cc662b0715d537f';
g_searchEnginePlainTextArray['9ffd78adc609cc5c6cc662b0715d537f'] = '简介 在以下内容中，您将了解到如何组态报警控件并借此显示记录的报警。 要求 报警日志已创建。 步骤 打开“ Alarms”画面并插入一个报警控件。 组态报警控件并令记录的报警得以显示： 结果 用于显示已记录报警的报警控件已组态。';
g_sepIdx[g_sepIdx.length] = 'd3eacd3df898313c4d84a9edf44059d4';
g_searchEnginePlainTextArray['d3eacd3df898313c4d84a9edf44059d4'] = '简介 三个储罐的填充料位和三个阀门的状态应在 HMI 设备上显示为趋势。 要求 3 个储罐的填充料位已创建为已记录变量“ log_hop_level”、“ log_malt_level”和“ log_water_level”。 3 个阀门的状态已创建为已记录变量“ log_status_hop”、“ log_status_malt”和“ log_status_water”。 步骤 打开“ ProcessValues”画面并插入趋势视图。 向趋势视图中添加两个趋势区域。 为第一个趋势视图组态填充料位： 指定第一个趋势应由已记录变量提供数据。 指定第一个趋势应以已记录变量“ log_hop_level”的值为数据来源。 向第一个趋势视图中再添加两个趋势。 指定这两个趋势都以已记录变量“ log_malt_level”和“ log_water_level”的值为数据来源。 为第一个趋势分配所需的线颜色。 为另外两个趋势分配所需的线颜色。 为第二个趋势视图组态阀门状态： 指定第一个趋势应由已记录变量提供数据。 指定第一个趋势应以已记录变量“ log_status_hop”的值为数据来源。 为第一个趋势“ Stepped”设置趋势模式。 向第二个趋势视图中再添加两个趋势。 指定这两个趋势都以已记录变量“ log_status_malt”和“ log_status_water”的值为数据来源，并为这两个趋势指定趋势模式“ Stepped”。 为第一个趋势分配所需的线颜色。 为另外两个趋势分配所需的线颜色。 结果 用于显示填充料位和阀门状态的趋势视图已组态。';
g_sepIdx[g_sepIdx.length] = '43dd2ff4fe5d7e182a0debe8493ab64c';
g_searchEnginePlainTextArray['43dd2ff4fe5d7e182a0debe8493ab64c'] = '参数组类型 参数组类型根据所制造的产品指定参数及其属性。参数组类型是采用相同基本原料的不同产品的模板。  参数组类型中不会存储特定的参数值。因此，会基于每个要制造的产品（例如小麦啤酒和比尔森啤酒）的参数组类型创建参数组。 如果在成分类似的产品之间频繁切换，应使用参数组。在此过程中，可快速切换到另一个产品。可集中对参数组类型进行基本结构更改。 酿酒过程中的参数组 酿酒师创建或导入一个或多个参数组。值班经理为要制造的产品选择参数组。参数组从 HMI 传送到控制器，酿酒过程开始。控制器运行用户程序，并使用基本原料的参数值进行生产。各种原料送入糖化桶中。酿酒过程按用户程序继续执行。';
g_sepIdx[g_sepIdx.length] = '5288ba7ac44143b01ec97f440865792f';
g_searchEnginePlainTextArray['5288ba7ac44143b01ec97f440865792f'] = '简介 下文中将组态参数组类型。为此，需要组态控制器。如果之后要对组态进行测试，请将项目加载到实际控制器，或使用“ PLCSim”仿真控制器。 要求 组态要求 要组态控制器，需要“ STEP 7”许可证。 测试组态的要求 要通过“ PLCSim”测试参数组的组态，需要安装“ PLCSim”并组态其版本。有关模块和组态信息，请参见“ PLCSim”功能手册。 步骤 要在 HMI 与控制器之间进行通信，请在控制器上执行以下步骤： 添加 HMI 可与之进行通信的控制器。 创建用户数据类型 (UDT)。 创建程序块并将 UDT 存储为数据类型。 在 HMI 侧，将 HMI 连接到控制器，然后组态参数组类型。为此，需执行以下操作： 通过 HMI 变量将 HMI 和控制器的连接与程序块相关联。 创建参数组类型 将参数组控件插入 HMI 的控制面板中。';
g_sepIdx[g_sepIdx.length] = '8fc08deb70bbbab8290f53e71dd25302';
g_searchEnginePlainTextArray['8fc08deb70bbbab8290f53e71dd25302'] = '简介 要传送参数组，请先组态控制器，然后组态与 HMI 的连接。 步骤 添加一个新设备。 选择“ 1518T-4 PN/DP”控制器，然后将其重命名为“ Brewery Control”。 切换到“设备和网络”(Devices \u0026 Networks)。 将“ CP 1612 (A2)”通信模块添加到 HMI。 将控制器与新的 HMI 接口联网。 在 HMI 与控制器之间创建 HMI 连接。';
g_sepIdx[g_sepIdx.length] = '4a449ba928c003de1ae9c4c393e063ab';
g_searchEnginePlainTextArray['4a449ba928c003de1ae9c4c393e063ab'] = '简介 下文介绍了在控制器上创建用户数据类型以及将其添加到项目库的方法。用户数据类型稍后用作参数组类型的基础。 应在用户数据类型中创建以下元素： 元素名称 用途 数据类型 water 水量 Int hop 啤酒花 Int malt 麦芽量 Int 创建用户数据类型并添加到库中 添加一个新数据类型。 在“ UDT_Beer”中重命名用户数据类型，并添加元素“ Water”、“ Hop”和“ Malt”。为所有元素选择“ Int”数据类型。 将新的数据类型添加到项目库。 在项目库中选择采用“ UDT_Beer”的用户数据类型。';
g_sepIdx[g_sepIdx.length] = '2a15dae3d779f47d2ad558ceeb130352';
g_searchEnginePlainTextArray['2a15dae3d779f47d2ad558ceeb130352'] = '简介 元素“ Water”、“ Hop”和“ Malt”的值存储在程序块中。下文中将插入数据块并将其与用户数据类型“ UDT_Beer”相关联。 步骤 添加一个新程序块。 将新数据块重命名为“ DB_Brewery” 创建新元素“ Beer”，并使用用户数据类型作为数据类型。会自动添加用户数据类型的参数。';
g_sepIdx[g_sepIdx.length] = 'e83c375579719e119021ee3a6528f09a';
g_searchEnginePlainTextArray['e83c375579719e119021ee3a6528f09a'] = '简介 下面将组态控制器与 HMI 设备之间的数据交换。 将 HMI 连接与程序块相关联 添加一个新变量表“ Recipe”，并创建参数“ HMI_Beer”。 选择 HMI 连接。 选择之前为数据块创建的 PLC 数据类型“ Beer”。';
g_sepIdx[g_sepIdx.length] = '00be830658fcb99f8091bd747221757c';
g_searchEnginePlainTextArray['00be830658fcb99f8091bd747221757c'] = '简介 下文中将创建一个用于多种啤酒类型的参数组类型。参数组将通过参数组类型  \"PST_Beer\" 接收其结构。参数组类型由元素  \"water\"、 \"hop\" 和  \"malt\" 构成。 元素名称 用途 数据类型 测量单位 water 水量 Int l hop 啤酒花 Int kg malt 麦芽量 Int kg 步骤 添加一个新的参数组类型，并将其命名为“ PST_Beer”。 选择用户数据类型“ UDT_Beer”作为数据类型。会根据用户数据类型自动创建结构。 选择变量“ Beer”。 指定数据类型的测量单位。';
g_sepIdx[g_sepIdx.length] = 'd0016df7e4c986f91a49b4cec65dc46c';
g_searchEnginePlainTextArray['d0016df7e4c986f91a49b4cec65dc46c'] = '简介 下文中将组态参数组控件。在运行系统中，通过参数组控件创建和编辑参数组。 步骤 在 HMI 画面“ ProductCtrl”中插入参数组控件。 将参数组类型连接到参数组控件。';
g_sepIdx[g_sepIdx.length] = '97da620fc784de1441258bf51cb013a7';
g_searchEnginePlainTextArray['97da620fc784de1441258bf51cb013a7'] = '简介 要与 PLCSim 建立连接，请在建立连接之前定义对 PLC 的访问权限。 开始仿真后，PLCSim 控制窗口将打开。可使用“运行”(Run) 和“停止”(Stop) 按钮控制仿真。如果按照文中所述步骤进行操作，则不需要操作控制窗口。  在操作过程中，取消激活用于保护机密数据和限制操作的功能。取消激活这些功能是为了简化仿真过程。在实际过程环境中，必须限制这种访问。对于自动化系统，无条件维护操作安全以及保护生命和身体安全至关重要。实现这一点的决定性要求是保持系统可用性，这样才能不受限制地控制整个过程。 步骤 打开“啤酒厂控制”(Brewery Control) 控制器的属性。 取消激活用于保护机密 PLC 组态数据的功能，并为控制器选择“完全访问”(Full access) 访问等级。 启动仿真。 选择目标设备。 检查设置并加载数据。 完成加载过程。 建立“在线连接”。 结果 连接已成功建立。';
g_sepIdx[g_sepIdx.length] = 'f5ad851385b46bf71b35d072364fd27d';
g_searchEnginePlainTextArray['f5ad851385b46bf71b35d072364fd27d'] = '基本知识 借助 WinCC 可将安全相关操作限定于特殊用户组，从而防止对运行系统数据和功能进行未经过授权的访问。 创建用户并为其分配权限。组态操作安全相关的对象所需的权限。 在运行系统中，用户必须使用用户名和密码登录。只要用户具有所需的权限，其发出的操作就会得到执行。 为用户分配角色后，会为其分配与角色关联的权限。对于酿酒过程，具有关联权限的角色如下： 酿酒师 值班经理 操作员 可监视过程 x x x 可操作过程 x x 可编辑配方 x 用户管理为全局或本地。 全局和本地用户管理 本地用户管理是在项目中执行的。用户是由工程师创建的，仅存在于此项目中。工程师定义各个角色的权限，并为用户分配相应的角色。 如果随后添加或移除新用户，必须更改项目。如果仅创建和管理一个项目，可使用本地用户管理。例如，单个酿酒厂。 在全局用户管理中，会解除用户与项目中角色的关联，并在外部服务器上集中管理用户。会在外部服务器上创建用户，并将用户组织到与其后续用途相对应的组中。工程师不会在项目中创建用户。工程师从外部服务器导入组，并为组分配相应的角色。 稍后添加用户时，会在外部服务器上创建用户，并将其分配给已有的组。这样便会自动为用户分配在相应项目中为组分配的角色，而不需要更改项目。  全局用户管理特别适用于要集中维护多个项目的情况。例如由一家公司管理多个不同的酿酒厂，或者有新员工频繁加入的情况。';
g_sepIdx[g_sepIdx.length] = '54ef26d7006ca83ea81a2eaac10b5820';
g_searchEnginePlainTextArray['54ef26d7006ca83ea81a2eaac10b5820'] = ' XML_NODE_NOTE 简介 下文将介绍如何创建本地用户管理。 创建本地用户。 创建新本地用户。 命名新的本地用户并定义密码。 用户名中不得包含空格 再创建两个用户并为每个用户都定义一个密码。 为用户“ HMI Administrator”分配角色“ masterbrewer”。 为用户“ HMI Operator”分配角色“ shiftsupervisor”。 为用户“ HMI Monitor”分配角色“ worker”。 显示并检查用户的权限。 在必要时，还可定义自身的用户角色。';
g_sepIdx[g_sepIdx.length] = '5e0bc357d8fffe5020f08d5a266872a7';
g_searchEnginePlainTextArray['5e0bc357d8fffe5020f08d5a266872a7'] = '基本知识 可视化通常会基于功能或技术方面而划分为多个画面。在这些画面之间切换被称为画面浏览。';
g_sepIdx[g_sepIdx.length] = 'fa162268dd280668d5335ba55cb814e2';
g_searchEnginePlainTextArray['fa162268dd280668d5335ba55cb814e2'] = '基本知识 为进行画面导航，需要使用画面窗口工艺。借助画面窗口将总览画面分为三个区域，并确定各个画面窗口所显示的 HMI 画面。 有关系统的信息显示在画面窗口“ sw_Content”中，例如酿酒过程、报警或过程值等。用于导航的 HMI 画面显示在“ sw_Header”和“ sw_Navigation”画面窗口中。 使用 HMI 画面“ Header”中的“ Open Navigation”按钮来显示 HMI 画面“ Navigation”。借助 HMI 画面“ Navigation”中的按钮，操作员可在运行时更改画面窗口“ sw_Content”中的画面。 组态 在本部分中，您将了解以下内容： 插入和组态画面窗口 组态按钮，令其借助系统函数“ SetPropertyValue”显示和隐藏画面窗口。 组态按钮，令其借助系统函数“ ChangeScreen”切换画面窗口的内容';
g_sepIdx[g_sepIdx.length] = '445628e991dc3b999f1629c5ed54608c';
g_searchEnginePlainTextArray['445628e991dc3b999f1629c5ed54608c'] = '简介 画面导航通过画面窗口工艺执行。借助画面窗口工艺，可实现画中画视图：画面切换在画面窗口中执行。画面窗口的根画面仍保持可见。 对象 类型 标签 用途 BreweryOverview HMI 画面 - 用于操作和监视酿酒过程的总览画面 sw_Content 画面窗口 - 用于显示过程控制画面的画面 sw_Header 画面窗口 - 用于打开过程控制画面间导航的画面 sw_Navigation 画面窗口 - 用于在过程控制画面之间导航的画面 btn_ShowNavigation 按钮 Open Navigation 显示画面窗口“ sw_Navigation” btn_HideNavigation 按钮 \u003c 隐藏画面窗口“ sw_Navigation” btn_ProcessBrewery 按钮 Brewery 酿酒过程的画面切换 btn_ProcessValues 按钮 Process Values 酿酒过程值的画面切换 btn_Alarms 按钮 Alarms 酿酒过程报警的画面切换 btn_ProductCtrl 按钮 Production 生产控件的画面切换 步骤 打开 HMI 画面“ BreweryOverview”并插入一个用于显示  Headers 的画面窗口。 指定此 HMI 画面“ Header”将在画面窗口中显示。 组态画面窗口的窗口设置。 组态画面窗口，令其适合所显示的 HMI 画面的大小。 指定画面窗口的名称。 组态画面窗口“ sw_Content”： 复制画面窗口“ sw_Header”。 将复制的画面窗口重命名为“ sw_Content”。 指定此 HMI 画面“ BreweryProcess”将在画面窗口中显示。 组态画面窗口“ sw_Navigation”： 复制画面窗口“ sw_Header”。 将复制的画面窗口重命名为“ sw_Navigation”。 指定此 HMI 画面“ Navigation”将在画面窗口中显示。 指定画面窗口“ sw_Navigation”将始终在前台显示。  将三个画面窗口置于 HMI 画面中： 指定画面窗口“ sw_Header”的位置。 指定画面窗口“ sw_Content”的位置。 使用鼠标，将画面窗口“ sw_Navigation”置于另外两个画面窗口的前台。';
g_sepIdx[g_sepIdx.length] = 'cac9fd19a67991f790f4611784b3f70d';
g_searchEnginePlainTextArray['cac9fd19a67991f790f4611784b3f70d'] = ' XML_NODE_NOTE 简介 在下文中，我们将组态 HMI 画面“ Header”，此画面将显示在画面窗口“ sw_Header”中。操作员将可通过 HMI 画面“ Header”中的按钮显示画面窗口“ sw_Navigation”，并从中切换画面窗口“ sw_Content”中的画面。  步骤 打开 HMI 画面“ Header”并插入用于显示画面窗口“ sw_Navigation”的按钮。 定义画面的标签。 为事件“ Click left mouse button”添加系统函数。 选择用于设置属性值的系统功能。 指定系统函数“ SetPropertyValue”的参数。 大小写 设置参数时，请注意大小写。';
g_sepIdx[g_sepIdx.length] = 'aa309aad67a9da81cdecf366c927702e';
g_searchEnginePlainTextArray['aa309aad67a9da81cdecf366c927702e'] = ' XML_NODE_NOTE 简介 在下文中，我们将组态 HMI 画面“ Navigation”，此画面将显示在画面窗口“ sw_Navigation”中。借助 HMI 画面“ Navigation”中的按钮，可更改画面窗口“ sw_Content”中显示的 HMI 画面。  画面窗口“ sw_Navigation”默认隐藏，可通过“ Header”中的“ Open Navigation”按钮显示出来，并可通过 HMI 画面“ Navigation”中的“ \u003c”按钮再次隐藏。 步骤 打开 HMI 画面“ Navigation”并插入用于隐藏画面窗口“ sw_Navigation”的按钮。 以同样的方法插入其它按钮。 组态用于隐藏画面窗口“ sw_Navigation”的按钮“ \u003c”。 为事件“ Click left mouse button”添加系统函数。 选择系统函数“ SetPropertyValue”。 指定系统函数“ SetPropertyValue”的参数。 大小写 设置参数时，请注意大小写。 组态用于在画面窗口“ sw_Content”中显示酿酒过程按钮“ Brewery”。 插入一个新事件。 选择系统函数“ ChangeScreen”。 指定此画面“ BreweryProcess”将在画面窗口“ sw_Content”中显示。 输入画面窗口“ sw_Content”的相对路径“ ../sw_Content”。 按照与按钮“ Brewery”相同的方式组态按钮“ Process Values”，并指定要为事件“ ChangeScreen”显示的参数。 按照与按钮“ Brewery”相同的方式组态按钮“ Alarms”，并指定要为事件“ ChangeScreen”显示的参数。 按照与按钮“ Brewery”相同的方式组态按钮“ Production”，并指定要为事件“ ChangeScreen”显示的参数。';
g_sepIdx[g_sepIdx.length] = '46ff84349f6412511256f00d5e732175';
g_searchEnginePlainTextArray['46ff84349f6412511256f00d5e732175'] = '简介 用户组“ Worker”内的员工不应能够操作过程值。为确保这一点，为调用过程值的按钮组态适当的访问保护。 步骤 打开“ Navigation”画面。 选择“ Process Values”按钮并为此按钮分配“ Operate”访问权限。';
g_sepIdx[g_sepIdx.length] = 'a0d605da5ff79793d83f8bec4a04bf1a';
g_searchEnginePlainTextArray['a0d605da5ff79793d83f8bec4a04bf1a'] = '基本知识 用于操作和监视酿酒过程的环境称为“ Runtime”。运行系统在浏览器中独立于 HMI 设备运行。  在本“入门指南”中，运行系统在您组态此系统的 PC 中运行。要在浏览器中启动运行系统，登录到 Windows 的用户必须具有本地管理员权限。 ';
g_sepIdx[g_sepIdx.length] = 'c3d0b8a9372564f12c7f12750941cda2';
g_searchEnginePlainTextArray['c3d0b8a9372564f12c7f12750941cda2'] = '简介 证书的用途是将终端设备可靠地连接到 WinCC Unified Runtime。通过证书可执行以下任务： 确认通信伙伴的身份 对数据交换进行加密 工作原理 借助 WinCC Unified Configuration，可将证书传送到访问运行系统的客户端 PC ①。在操作员输入运行系统服务器的 URL 时，将通过证书检查客户端的身份 ②。检查之后，操作员通过用户名和密码完成身份验证 ③。运行系统服务器和客户端彼此通过 HTTPS 协议进行加密通信 ④。 设置证书结构 WinCC Configuration Tool | FAQ';
g_sepIdx[g_sepIdx.length] = 'fa36066cf833ae63b732ebb4e0b42c6d';
g_searchEnginePlainTextArray['fa36066cf833ae63b732ebb4e0b42c6d'] = '启动仿真 先通过控件的快捷菜单启动对“BreweryControl”的仿真。加载过程完成后，“PLCSim”应用程序将自动启动。  启动 HMI 设备的仿真。   指定使用本地用户管理方法，并确保已将组态数据下载到 HMI 设备。  在组态计算机上打开 Chrome 浏览器并启动运行系统。  登录到运行系统中。  在此情况下，使用已在本地用户管理中创建的用户“ masterbrewer”。 测试组态 检查是否所有画面切换都可按预期方式工作。 导航到“ProductControl”画面。 为“Pilsner”啤酒类型创建参数组。 输入需要的原料量，并保存“Pilsner”参数组。 恭喜！ 您已通过 WinCC Runtime Unified 创建了第一个项目并成功在运行系统中测试。 ';
g_sepIdx[g_sepIdx.length] = '80cbf0d6d6fd203320d11073b18ece7d';
g_searchEnginePlainTextArray['80cbf0d6d6fd203320d11073b18ece7d'] = '说明 运行系统协作是指运行期间在多个 Unified 系统（面板和 PC）之间交换数据。 通过运行系统协作，可在画面窗口中显示和操作其它站的过程画面，因此，无需进行重复组态。 要能够传输数据，必须在所有协作系统中指定协作设置。组态后会共享面板，以便进行访问。在 PC 中激活对面板的访问。';
g_sepIdx[g_sepIdx.length] = '6f2b807c25f30ecd3e844212fb396a95';
g_searchEnginePlainTextArray['6f2b807c25f30ecd3e844212fb396a95'] = '简介 在本“入门指南”中，您已组态在“ Activated”（例如，用于触发运行系统中的画面切换）等事件时执行的功能。对于此组态，您必须了解有关“脚本”的一些小细节。WinCC Runtime Unified 提供了一个现代的脚本环境，支持编程语言 JavaScript。 编程环境 编程环境已集成到您所熟悉的工作环境中，并支持诸如语法突出显示等的功能： JavaScript 以对象模型为基础，并支持在编辑器中通过 IntelliSense 导航： 代码片段可提供常用的指令模式，令编程更为轻松： 概念 脚本支持全局和本地脚本： 全局脚本集中在项目中编程。例如，您可在局部脚本中调用全局脚本，例如单位转换。   本地脚本在相应的使用点编程，例如对象的颜色切换。  您可使用预定义的系统函数来执行经常性的编程任务，例如更改值或退出运行系统等。  典型应用示例 在本“入门指南”中，您使用了以下 JavaScript 功能： 代码片段 系统函数 其它典型的 JavaScript 应用示例为：  读取和写入变量 根据其它属性或值来更改对象属性 访问报警 参考 有关脚本使用的更多信息，请参见 SIOS 门户中的条目 ID 109758536。';
